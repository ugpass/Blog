<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>冷石</title>
  <icon>https://coldstone.fun/avatar.png</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://coldstone.fun/"/>
  <updated>2020-12-07T01:51:26.703Z</updated>
  <id>https://coldstone.fun/</id>
  
  <author>
    <name>ColdStone</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>认识 Range 和 Selection 对象</title>
    <link href="https://coldstone.fun/post/2020/12/05/selection-and-range/"/>
    <id>https://coldstone.fun/post/2020/12/05/selection-and-range/</id>
    <published>2020-12-05T02:51:38.000Z</published>
    <updated>2020-12-07T01:51:26.703Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>DOM 文档对象模型中总共有 12 种节点类型，常见的有以下几种</p><table><thead><tr><th align="left">常量</th><th align="left">值</th><th align="left">类型</th></tr></thead><tbody><tr><td align="left">ELEMENT_NODE</td><td align="left">1</td><td align="left">元素节点</td></tr><tr><td align="left">TEXT_NODE</td><td align="left">3</td><td align="left">文本节点</td></tr><tr><td align="left">COMMENT_NODE</td><td align="left">8</td><td align="left">注释节点</td></tr><tr><td align="left">DOCUMENT_NODE</td><td align="left">9</td><td align="left">Document 节点</td></tr><tr><td align="left">DOCUMENT_FRAGMENT_NODE</td><td align="left">11</td><td align="left">DocumentFragment 节点</td></tr></tbody></table><blockquote><p><a href="https://wiki.developer.mozilla.org/zh-CN/docs/Web/API/Node/nodeType" target="_blank" rel="noopener">https://wiki.developer.mozilla.org/zh-CN/docs/Web/API/Node/nodeType</a></p></blockquote><h2 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h2><p><code>Range</code> 对象表示一个范围，有起始点和终止点，是用于管理选择范围的通用对象。</p><p>每个点都是一个相对于父节点的偏移量（offset），如果父节点是元素节点，则偏移量是子节点的编号。如果父节点是文本节点，则是文本中的位置。</p><p>需要注意的是终点要在起点之后。</p><p>有以下 HTML 片段</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div"</span>&gt;</span>Hello <span class="tag">&lt;<span class="name">span</span>&gt;</span>World<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>!<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用-Range-选择节点"><a href="#使用-Range-选择节点" class="headerlink" title="使用 Range 选择节点"></a>使用 Range 选择节点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> div = <span class="built_in">document</span>.getElementById(<span class="string">'div'</span>)</span><br><span class="line"><span class="comment">// 创建一个 `Range` 对象</span></span><br><span class="line"><span class="keyword">const</span> range = <span class="keyword">new</span> Range()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置范围起点为文本节点 Hello</span></span><br><span class="line">range.setStart(div, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 设置范围终点为元素节点 &lt;b&gt;!&lt;/b&gt; （不包括）</span></span><br><span class="line">range.setEnd(div, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 以文本形式返回其内容</span></span><br><span class="line"><span class="built_in">console</span>.log(range.toString()); <span class="comment">// Hello World</span></span><br></pre></td></tr></table></figure><h3 id="选择文本节点的一部分"><a href="#选择文本节点的一部分" class="headerlink" title="选择文本节点的一部分"></a>选择文本节点的一部分</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">range.setStart(div.firstChild, <span class="number">4</span>);</span><br><span class="line">range.setEnd(div, <span class="number">2</span>);</span><br><span class="line">  </span><br><span class="line"><span class="built_in">console</span>.log(range.toString()); <span class="comment">// o World</span></span><br></pre></td></tr></table></figure><h3 id="Range-的方法"><a href="#Range-的方法" class="headerlink" title="Range 的方法"></a>Range 的方法</h3><p><code>setStart(node, offset)</code> 将起点设置在：node 中的位置 offset<br><code>setStartBefore(node)</code> 将起点设置在：node 前面<br><code>setStartAfter(node)</code> 将起点设置在：node 后面</p><p><code>setEnd(node, offset)</code> 将终点设置为：node 中的位置 offset<br><code>setEndBefore(node)</code> 将终点设置为：node 前面<br><code>setEndAfter(node)</code> 将终点设置为：node 后面</p><p><code>selectNode(node)</code> 设置范围以选择整个 node<br><code>selectNodeContents(node)</code> 设置范围以选择整个 node 的内容<br><code>collapse(toStart)</code> 如果 toStart=true 则设置 end=start，否则设置 start=end，从而折叠范围<br><code>cloneRange()</code> 创建一个具有相同起点/终点的新范围</p><p><code>deleteContents()</code> 从文档中删除范围内容<br><code>extractContents()</code> 从文档中删除范围内容，并将删除的内容作为 DocumentFragment 返回<br><code>cloneContents()</code> 复制范围内容，并将复制的内容作为 DocumentFragment 返回<br><code>insertNode(node)</code> 在范围的起始处将 node 插入文档<br><code>surroundContents(node)</code> 使用 node 将所选范围内容包裹起来。要使此操作有效，则该范围必须包含其中所有元素的开始和结束标签：不能像 <i>abc 这样的部分范围</i></p><h2 id="Selection"><a href="#Selection" class="headerlink" title="Selection"></a>Selection</h2><p><code>Selection</code> 对象表示文档中的选择范围，可通过 <code>window.getSelection()</code> 或 <code>document.getSelection()</code> 来获取。</p><p>通过以下方式来监听选择事件</p><p><code>elem.onselectstart</code> —— 当选择在 elem 上触发时，例如，用户按下鼠标键并开始移动鼠标，阻止默认行为会使选择无法开始。</p><p><code>document.onselectionchange</code> —— 当选择变动时，此事件监听只能在 document 上设置。</p><p>选择对象的主要属性有</p><p><code>anchorNode</code> 选择的起始节点<br><code>anchorOffset</code> 选择起始节点的偏移量<br><code>focusNode</code> 选择的结束节点<br><code>focusOffset</code> 选择结束节点的偏移量<br><code>isCollapsed</code> 选择是否为空或不存在<br><code>rangeCount</code> 选择中的范围 (Range) 数，除 Firefox 外，其他浏览器最多为 1</p><h3 id="获取选择"><a href="#获取选择" class="headerlink" title="获取选择"></a>获取选择</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div"</span>&gt;</span>Hello <span class="tag">&lt;<span class="name">span</span>&gt;</span>World<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>!<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'selectionchange'</span>, event =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;anchorNode, anchorOffset, focusNode, focusOffset&#125; = <span class="built_in">document</span>.getSelection();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'anchorNode: '</span>, anchorNode)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'anchorOffset: '</span>, anchorOffset)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'focusNode: '</span>, focusNode)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'focusOffset: '</span>, focusOffset)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'----------'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="./images/selection-and-range/right-to-left.jpg" alt="right-to-left"></p><h3 id="选择的方法"><a href="#选择的方法" class="headerlink" title="选择的方法"></a>选择的方法</h3><p><code>getRangeAt(i)</code> 获取从 0 开始的第 i 个范围。在除 Firefox 之外的所有浏览器中，仅使用 0。<br><code>addRange(range)</code> 将 range 添加到选择中。如果选择已有关联的范围，则除 Firefox 外的所有浏览器都将忽略该调用。<br><code>removeRange(range)</code> 从选择中删除 range。<br><code>removeAllRanges()</code> 删除选择中所有范围。<br><code>empty()</code> removeAllRanges 的别名。</p><p><code>collapse(node, offset)</code> 用一个新的范围替换选定的范围，该新范围从给定的 node 处开始，到偏移 offset 处结束。<br><code>setPosition(node, offset)</code> collapse 的别名。<br><code>collapseToStart()</code> 折叠（替换为空范围）到选择起点。<br><code>collapseToEnd()</code> 折叠到选择终点。<br><code>extend(node, offset)</code> 将选择的焦点（focus）移到给定的 node，位置偏移 oofset。</p><p><code>setBaseAndExtent(anchorNode, anchorOffset, focusNode, focusOffset)</code> 用给定的起点 anchorNode/anchorOffset 和终点 focusNode/focusOffset 来替换选择范围。选中它们之间的所有内容。<br><code>selectAllChildren(node)</code> 选择 node 的所有子节点。<br><code>deleteFromDocument()</code> 从文档中删除所选择的内容。<br><code>containsNode(node, allowPartialContainment = false)</code> 检查选择中是否包含 node（特别是如果第二个参数是 true 的话）。</p><h2 id="使文档中某些内容不可选"><a href="#使文档中某些内容不可选" class="headerlink" title="使文档中某些内容不可选"></a>使文档中某些内容不可选</h2><ol><li>使用 CSS 属性 <code>user-select: none</code> 不允许选择从 elem 开始，但是用户可以在其他地方开始选择，并将 elem 包含在内。</li><li>阻止 <code>onselectstart</code> 或 <code>mousedown</code> 事件中的默认行为，这样可以防止在 elem 上开始选择，但是访问者可以在另一个元素上开始选择，然后扩展到 elem。</li><li>使用 <code>document.getSelection().empty()</code> 方法在选择发生后清除选择范围。</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node" target="_blank" rel="noopener">Node</a><br><a href="https://zh.javascript.info/selection-range#comments" target="_blank" rel="noopener">选择（Selection）和范围（Range）</a></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;h2 id=&quot;前置知识&quot;&gt;&lt;a href=&quot;#前置知识&quot; class=&quot;headerlink&quot; title=&quot;前置知识&quot;&gt;&lt;/a&gt;前置知识&lt;/h2&gt;&lt;p&gt;DOM 文档对象模型中总共有 12
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Web" scheme="https://coldstone.fun/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>什么是 peerDependencies</title>
    <link href="https://coldstone.fun/post/2020/11/29/npm-peerDependencies/"/>
    <id>https://coldstone.fun/post/2020/11/29/npm-peerDependencies/</id>
    <published>2020-11-29T11:30:00.000Z</published>
    <updated>2020-12-07T01:51:26.703Z</updated>
    
    <content type="html"><![CDATA[<p><code>package.json</code> 里面的 <code>peerDependencies</code> 是什么意思</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>众所周知 <code>dependencies</code> 是项目的依赖包，<code>devDependencies</code> 项目开发阶段的依赖包，这些依赖包会在 <code>npm install</code> 过程中自动安装。</p><p>假设项目本身依赖 package A, 但是另一个 package B 同时依赖 package A，为了避免冲突，这时候就需要将 package A 设置为 package B 的<br><code>peerDependencies</code>。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>假设项目 A 依赖 package B</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;b&quot;: &quot;^1.0.0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>package B 有一个 <code>peerDependencies</code> package c</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;peerDependencies&quot;: &#123;</span><br><span class="line">    &quot;c&quot;: &quot;^1.x&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么在项目 A 安装 package B 的时候, 要求同时安装 package C 作为 A 的 <code>dependencies</code>。</p><p>总而言之 <code>peerDependencies</code> 是<code>宿主</code>项目安装给其他依赖包使用的 package。</p><blockquote><p>注意: npm 1 和 2 版本会自动安装 peerDependencies。从 npm@3 开始将不再自动安装，而是得到一个警告，告知 <code>peerDependency</code> 没有被安装。</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://flaviocopes.com/npm-peer-dependencies/" target="_blank" rel="noopener">What are peer dependencies in a Node module?</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;package.json&lt;/code&gt; 里面的 &lt;code&gt;peerDependencies&lt;/code&gt; 是什么意思&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="npm" scheme="https://coldstone.fun/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>学习观察者模式</title>
    <link href="https://coldstone.fun/post/2020/10/20/design-patterns-observer/"/>
    <id>https://coldstone.fun/post/2020/10/20/design-patterns-observer/</id>
    <published>2020-10-20T14:00:00.000Z</published>
    <updated>2020-12-07T01:51:26.699Z</updated>
    
    <content type="html"><![CDATA[<p><img src="./images/design-patterns-observer/cover.png" alt="Observer"></p><a id="more"></a><h2 id="什么是观察者模式"><a href="#什么是观察者模式" class="headerlink" title="什么是观察者模式"></a>什么是观察者模式</h2><p>观察者模式是一种行为设计模式，允许你定义一种订阅机制，可在对象事件发生时通知多个 “观察” 该对象的对象。</p><p>有值得关注的状态的对象通常被称为目标，由于它要将自身的状态改变通知给其他对象，我们也将其称为发布者 （publisher），所有希望关注发布者状态变化的其他对象被称为订阅者（subscribers）。</p><p>当发布者发布了事件，它要遍历订阅者并调用其对象的特定通知方法。</p><p>举例说明观察者模式类似于明星与粉丝的关系，粉丝关注明星，当明星发布消息的时候，粉丝会对这个消息做出反应。</p><h2 id="观察者模式适用场景"><a href="#观察者模式适用场景" class="headerlink" title="观察者模式适用场景"></a>观察者模式适用场景</h2><p>当一个对象状态的改变需要改变其他对象，可使用观察者模式。</p><p>当一些对象必须观察其他对象时，可使用观察者模式。</p><h2 id="实现观察者模式"><a href="#实现观察者模式" class="headerlink" title="实现观察者模式"></a>实现观察者模式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目标</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.observers = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加观察者</span></span><br><span class="line">  attach(observer) &#123;</span><br><span class="line">    <span class="keyword">const</span> isExist = <span class="keyword">this</span>.observers.includes(observer)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isExist) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'观察者已添加'</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.observers.push(observer)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 移除观察者</span></span><br><span class="line">  detach(observer) &#123;</span><br><span class="line">    <span class="keyword">const</span> index = <span class="keyword">this</span>.observers.indexOf(observer)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'观察者不存在'</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.observers.splice(index, <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通知观察者</span></span><br><span class="line">  notify() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> observer <span class="keyword">of</span> <span class="keyword">this</span>.observers) &#123;</span><br><span class="line">      observer.update(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 观察者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 接收发布事件</span></span><br><span class="line">  update(subject) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h2><p>小明，小红，小安都会留意早餐吃什么，不同的早餐会使他们产生不同的情绪，因此早餐是目标，三人是观察者。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继承目标类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Breakfast</span> <span class="keyword">extends</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(element) &#123;</span><br><span class="line">    <span class="keyword">super</span>()</span><br><span class="line">    <span class="keyword">this</span>.value = <span class="string">''</span></span><br><span class="line">    <span class="keyword">this</span>.element = element</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.element.addEventListener(<span class="string">'change'</span>, (event) =&gt; &#123;</span><br><span class="line">      <span class="keyword">this</span>.value = <span class="keyword">this</span>.element.value</span><br><span class="line">      <span class="keyword">this</span>.notify()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  notify() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> observer <span class="keyword">of</span> <span class="keyword">this</span>.observers) &#123;</span><br><span class="line">      observer.update(<span class="keyword">this</span>.value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承观察者类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(element) &#123;</span><br><span class="line">    <span class="keyword">super</span>()</span><br><span class="line">    <span class="keyword">this</span>.mood = <span class="string">''</span></span><br><span class="line">    <span class="keyword">this</span>.element = element</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  update(subject) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型一</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person1</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  update(value) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (value) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'bread'</span>:</span><br><span class="line">        <span class="keyword">this</span>.mood = <span class="string">'开心'</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'noodles'</span>:</span><br><span class="line">        <span class="keyword">this</span>.mood = <span class="string">'喜悦'</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'gruel'</span>:</span><br><span class="line">        <span class="keyword">this</span>.mood = <span class="string">'讨厌'</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">this</span>.mood = <span class="string">''</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.element.querySelector(<span class="string">'.mood'</span>).innerHTML = <span class="keyword">this</span>.mood</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型二</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person2</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  update(value) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (value) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'bread'</span>:</span><br><span class="line">        <span class="keyword">this</span>.mood = <span class="string">'讨厌'</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'noodles'</span>:</span><br><span class="line">        <span class="keyword">this</span>.mood = <span class="string">'开心'</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'gruel'</span>:</span><br><span class="line">        <span class="keyword">this</span>.mood = <span class="string">'还可以'</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">this</span>.mood = <span class="string">''</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.element.querySelector(<span class="string">'.mood'</span>).innerHTML = <span class="keyword">this</span>.mood</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型三</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person3</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  update(value) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (value) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'bread'</span>:</span><br><span class="line">        <span class="keyword">this</span>.mood = <span class="string">'不喜欢'</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'noodles'</span>:</span><br><span class="line">        <span class="keyword">this</span>.mood = <span class="string">'还可以'</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'gruel'</span>:</span><br><span class="line">        <span class="keyword">this</span>.mood = <span class="string">'开心'</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">this</span>.mood = <span class="string">''</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.element.querySelector(<span class="string">'.mood'</span>).innerHTML = <span class="keyword">this</span>.mood</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建目标“早餐”</span></span><br><span class="line"><span class="keyword">const</span> breakfast = <span class="keyword">new</span> Breakfast(<span class="built_in">document</span>.getElementById(<span class="string">'breakfast'</span>))</span><br><span class="line"><span class="comment">// 创建观察者小明</span></span><br><span class="line"><span class="keyword">const</span> xiaoming = <span class="keyword">new</span> Person1(<span class="built_in">document</span>.getElementById(<span class="string">'xiaoming'</span>))</span><br><span class="line"><span class="comment">// 创建观察者小红</span></span><br><span class="line"><span class="keyword">const</span> xiaohong = <span class="keyword">new</span> Person2(<span class="built_in">document</span>.getElementById(<span class="string">'xiaohong'</span>))</span><br><span class="line"><span class="comment">// 创建观察者小安</span></span><br><span class="line"><span class="keyword">const</span> xiaoan = <span class="keyword">new</span> Person3(<span class="built_in">document</span>.getElementById(<span class="string">'xiaoan'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加观察者</span></span><br><span class="line">breakfast.attach(xiaoming)</span><br><span class="line">breakfast.attach(xiaohong)</span><br><span class="line">breakfast.attach(xiaoan)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消观察</span></span><br><span class="line"><span class="comment">// breakfast.detach(xiaoan)</span></span><br></pre></td></tr></table></figure><p>当早餐发生变化时，不同类型的人会根据不同的早餐产生不同的情绪。</p><p><img src="./images/design-patterns-observer/breakfast.gif" alt="breakfrast"></p><p class="codepen" data-height="265" data-theme-id="dark" data-default-tab="js,result" data-user="xrr2016" data-slug-hash="xxOEqJK" style="height:265px;box-sizing:border-box;display:flex;align-items:center;justify-content:center;border:2px solid;margin:1em 0;padding:1em" data-pen-title="Observer Pattern"><span>See the Pen <a href="https://codepen.io/xrr2016/pen/xxOEqJK" target="_blank" rel="noopener">Observer Pattern</a> by Cold Stone (<a href="https://codepen.io/xrr2016" target="_blank" rel="noopener">@xrr2016</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;./images/design-patterns-observer/cover.png&quot; alt=&quot;Observer&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="https://coldstone.fun/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Design Patterns" scheme="https://coldstone.fun/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 绘制图形 Circle Packing</title>
    <link href="https://coldstone.fun/post/2020/09/17/flutter-generative-artistry-03/"/>
    <id>https://coldstone.fun/post/2020/09/17/flutter-generative-artistry-03/</id>
    <published>2020-09-17T13:28:44.000Z</published>
    <updated>2020-12-07T01:51:26.699Z</updated>
    
    <content type="html"><![CDATA[<p><img src="./images/flutter-generative-artistry-03/cover.png" alt="Circle Packing"></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>懒癌发作，好久没写博客了…</p><p>本文讲解使用 Flutter 实现 <a href="https://generativeartistry.com/tutorials" target="_blank" rel="noopener">Generative Artistry</a> 教程里面的第六个图形 Circle Packing（圆形填充）。</p><p>实现这个图形的思路大致是：</p><ol><li>创建一个圆。</li><li>判断这个圆是否与其他圆发生碰撞。</li><li>没有则不断增大圆的半径，再次进行碰撞检测，直至最大半径。</li><li>绘制更多的圆形，重复以上。</li></ol><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>照旧创建一个 <code>CirclePacking</code> 控件以及 <code>CirclePackingPainter</code>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CirclePacking</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> CustomPaint(</span><br><span class="line">      painter: CirclePackingPainter(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CirclePackingPainter</span> <span class="keyword">extends</span> <span class="title">CustomPainter</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> shouldRepaint(CirclePackingPainter oldDelegate) =&gt; <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后定义一个 <code>Circle</code> 类，代表绘制的圆形。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">  Point center;</span><br><span class="line">  <span class="built_in">double</span> radius;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在声明绘制需要的变量。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成的圆形数组</span></span><br><span class="line"><span class="built_in">List</span>&lt;Circle&gt; circles = [];</span><br><span class="line"><span class="comment">// 圆形的最小半径</span></span><br><span class="line"><span class="built_in">double</span> minRaidus = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 圆形的最大半径</span></span><br><span class="line"><span class="built_in">double</span> maxRaidus = <span class="number">100</span>;</span><br><span class="line"><span class="comment">// 圆形的总数</span></span><br><span class="line"><span class="built_in">int</span> totalCircles = <span class="number">500</span>;</span><br><span class="line"><span class="comment">// 尝试绘制圆形的总数</span></span><br><span class="line"><span class="built_in">int</span> createCircleAttemps = <span class="number">500</span>;</span><br><span class="line"><span class="comment">// 随机因子</span></span><br><span class="line">Random random = Random();</span><br></pre></td></tr></table></figure><h2 id="创建圆形"><a href="#创建圆形" class="headerlink" title="创建圆形"></a>创建圆形</h2><p>使用 <code>_createCircles</code> 方法生成需要绘制的圆形。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _createCircles(Canvas canvas, Size size) &#123;</span><br><span class="line">  Circle circle = Circle()</span><br><span class="line">    ..radius = minRaidus</span><br><span class="line">    ..center = Point(</span><br><span class="line">      random.nextDouble() * size.width,</span><br><span class="line">      random.nextDouble() * size.height,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果没有检测到碰撞，一直增大圆形的半径</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = minRaidus; i &lt; maxRaidus; i++) &#123;</span><br><span class="line">    circle.radius = i;</span><br><span class="line">    <span class="keyword">if</span> (_doesHaveCollision(circle, size)) &#123;</span><br><span class="line">      circle.radius--;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  circles.add(circle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>_doesHaveCollision</code> 方法进行碰撞检测，目前都返回 <code>false</code>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bool</span> _doesHaveCollision(Circle circle, Size size) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="绘制圆形"><a href="#绘制圆形" class="headerlink" title="绘制圆形"></a>绘制圆形</h2><p>创建一个 <code>_drawCircles</code> 方法绘制圆形。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _drawCircles(Canvas canvas) &#123;</span><br><span class="line">  Paint paint = Paint()</span><br><span class="line">    ..strokeWidth = <span class="number">0.5</span></span><br><span class="line">    ..isAntiAlias = <span class="keyword">true</span></span><br><span class="line">    ..color = Colors.black</span><br><span class="line">    ..style = PaintingStyle.stroke;</span><br><span class="line"></span><br><span class="line">  circles.asMap().forEach((key, circle) &#123;</span><br><span class="line">    <span class="keyword">final</span> Offset offset = Offset(circle.center.x, circle.center.y);</span><br><span class="line">    canvas.drawCircle(offset, circle.radius, paint);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>paint</code> 方法里调用创建和绘制圆形的方法。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; totalCircles; i++) &#123;</span><br><span class="line">    _createCircles(canvas, size);</span><br><span class="line">    _drawCircles(canvas);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>噔噔噔，一团乱麻！</p><img src="./images/flutter-generative-artistry-03/mess.png" width="640" style="width:320px"><h2 id="碰撞检测"><a href="#碰撞检测" class="headerlink" title="碰撞检测"></a>碰撞检测</h2><p>完善圆形之间的碰撞检测方法 <code>_doesHaveCollision</code>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bool</span> _doesHaveCollision(Circle circle, Size size) &#123;</span><br><span class="line">  <span class="comment">// 这里进行传入圆形与其他圆形的碰撞检测</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; circles.length; i++) &#123;</span><br><span class="line">    Circle otherCircle = circles[i];</span><br><span class="line">    <span class="built_in">double</span> r2 = circle.radius + otherCircle.radius;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断两圆圆心的距离是否小于它们的半径和</span></span><br><span class="line">    <span class="keyword">if</span> (r2 &gt;= circle.center.distanceTo(otherCircle.center) - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这里判断圆形是否超过左右边界</span></span><br><span class="line">  <span class="keyword">if</span> (circle.center.x + circle.radius &gt;= size.width ||</span><br><span class="line">      circle.center.x - circle.radius &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 这里判断圆形是否超过上下边界</span></span><br><span class="line">  <span class="keyword">if</span> (circle.center.y + circle.radius &gt;= size.height ||</span><br><span class="line">      circle.center.y - circle.radius &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="./images/flutter-generative-artistry-03/collision.png" width="640" style="width:320px"><p>最后需要做的是在创建圆形之前的检测，更新创建圆形的方法 <code>_createCircles</code>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _createCircles(Canvas canvas, Size size) &#123;</span><br><span class="line">  Circle circle;</span><br><span class="line">  <span class="built_in">bool</span> circleSafeToDraw = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用尝试绘制圆形的次数进行循环</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; createCircleAttemps; i++) &#123;</span><br><span class="line">    circle = Circle()</span><br><span class="line">      ..radius = minRaidus</span><br><span class="line">      ..center = Point(</span><br><span class="line">        random.nextDouble() * size.width,</span><br><span class="line">        random.nextDouble() * size.height,</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果碰撞检测失败跳过这个圆形，进行下一次尝试</span></span><br><span class="line">    <span class="comment">// 否则跳出循环将这个圆形加入 circles 数组</span></span><br><span class="line">    <span class="keyword">if</span> (_doesHaveCollision(circle, size)) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      circleSafeToDraw = <span class="keyword">true</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!circleSafeToDraw) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不断增大圆形的半径</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = minRaidus; i &lt; maxRaidus; i++) &#123;</span><br><span class="line">    circle.radius = i;</span><br><span class="line">    <span class="keyword">if</span> (_doesHaveCollision(circle, size)) &#123;</span><br><span class="line">      circle.radius--;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  circles.add(circle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大功告成 🎉</p><img src="./images/flutter-generative-artistry-03/finish.png" width="640" style="width:320px"><p>最终代码</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:math'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">  Point center;</span><br><span class="line">  <span class="built_in">double</span> radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CirclePacking</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> CustomPaint(</span><br><span class="line">      painter: CirclePackingPainter(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CirclePackingPainter</span> <span class="keyword">extends</span> <span class="title">CustomPainter</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 生成的圆形数组</span></span><br><span class="line">  <span class="built_in">List</span>&lt;Circle&gt; circles = [];</span><br><span class="line">  <span class="comment">// 圆形的最小半径</span></span><br><span class="line">  <span class="built_in">double</span> minRaidus = <span class="number">2</span>;</span><br><span class="line">  <span class="comment">// 圆形的最大半径</span></span><br><span class="line">  <span class="built_in">double</span> maxRaidus = <span class="number">100</span>;</span><br><span class="line">  <span class="comment">// 圆形的总数</span></span><br><span class="line">  <span class="built_in">int</span> totalCircles = <span class="number">500</span>;</span><br><span class="line">  <span class="comment">// 尝试绘制圆形的总数</span></span><br><span class="line">  <span class="built_in">int</span> createCircleAttemps = <span class="number">500</span>;</span><br><span class="line">  <span class="comment">// 随机因子</span></span><br><span class="line">  Random random = Random();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _createCircles(Canvas canvas, Size size) &#123;</span><br><span class="line">    Circle circle;</span><br><span class="line">    <span class="built_in">bool</span> circleSafeToDraw = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; createCircleAttemps; i++) &#123;</span><br><span class="line">      circle = Circle()</span><br><span class="line">        ..radius = minRaidus</span><br><span class="line">        ..center = Point(</span><br><span class="line">          random.nextDouble() * size.width,</span><br><span class="line">          random.nextDouble() * size.height,</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果碰撞检测失败跳过这个圆形，进行下一次尝试</span></span><br><span class="line">      <span class="comment">// 否则跳出循环将这个圆形加入 circles 数组</span></span><br><span class="line">      <span class="keyword">if</span> (_doesHaveCollision(circle, size)) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        circleSafeToDraw = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!circleSafeToDraw) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不断增大圆形的半径</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = minRaidus; i &lt; maxRaidus; i++) &#123;</span><br><span class="line">      circle.radius = i;</span><br><span class="line">      <span class="keyword">if</span> (_doesHaveCollision(circle, size)) &#123;</span><br><span class="line">        circle.radius--;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    circles.add(circle);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> _doesHaveCollision(Circle circle, Size size) &#123;</span><br><span class="line">    <span class="comment">// 这里对传入的圆形与其他绘制圆形的检测</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; circles.length; i++) &#123;</span><br><span class="line">      Circle otherCircle = circles[i];</span><br><span class="line">      <span class="built_in">double</span> r2 = circle.radius + otherCircle.radius;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 判断两个圆形圆心的距离是否小于两圆形的半径和</span></span><br><span class="line">      <span class="keyword">if</span> (r2 &gt;= circle.center.distanceTo(otherCircle.center) - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里判断圆形是否超过左右边界</span></span><br><span class="line">    <span class="keyword">if</span> (circle.center.x + circle.radius &gt;= size.width ||</span><br><span class="line">        circle.center.x - circle.radius &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 这里判断圆形是否超过上下边界</span></span><br><span class="line">    <span class="keyword">if</span> (circle.center.y + circle.radius &gt;= size.height ||</span><br><span class="line">        circle.center.y - circle.radius &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _drawCircles(Canvas canvas) &#123;</span><br><span class="line">    Paint paint = Paint()</span><br><span class="line">      ..strokeWidth = <span class="number">0.5</span></span><br><span class="line">      ..isAntiAlias = <span class="keyword">true</span></span><br><span class="line">      ..style = PaintingStyle.stroke;</span><br><span class="line"></span><br><span class="line">    circles.asMap().forEach((key, circle) &#123;</span><br><span class="line">      paint.color = Colors.black;</span><br><span class="line">      Offset offset = Offset(circle.center.x, circle.center.y);</span><br><span class="line">      canvas.drawCircle(offset, circle.radius, paint);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; totalCircles; i++) &#123;</span><br><span class="line">      _createCircles(canvas, size);</span><br><span class="line">      _drawCircles(canvas);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> shouldRepaint(CirclePackingPainter oldDelegate) =&gt; <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;./images/flutter-generative-artistry-03/cover.png&quot; alt=&quot;Circle Packing&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="教程" scheme="https://coldstone.fun/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Flutter" scheme="https://coldstone.fun/tags/Flutter/"/>
    
      <category term="Generative artistry" scheme="https://coldstone.fun/tags/Generative-artistry/"/>
    
  </entry>
  
  <entry>
    <title>阿里的三道面试题</title>
    <link href="https://coldstone.fun/post/2020/08/31/ali-interview-questions/"/>
    <id>https://coldstone.fun/post/2020/08/31/ali-interview-questions/</id>
    <published>2020-08-31T09:00:00.000Z</published>
    <updated>2020-12-07T01:51:26.699Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段时间做了三道阿里的在线面试题，分享一下。</p><h2 id="一-身为前端，我很抱歉"><a href="#一-身为前端，我很抱歉" class="headerlink" title="(一) 身为前端，我很抱歉"></a>(一) 身为前端，我很抱歉</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">根据表达式计算字母数。</span><br><span class="line">说明：</span><br><span class="line">  给定一个描述字母数量的表达式，计算表达式里的每个字母实际数量</span><br><span class="line">  表达式格式：</span><br><span class="line">    字母紧跟表示次数的数字，如 A2B3</span><br><span class="line">    括号可将表达式局部分组后跟上数字，(A2)<span class="number">2</span>B</span><br><span class="line">    数字为<span class="number">1</span>时可缺省，如 AB3。</span><br><span class="line">示例：</span><br><span class="line">  countOfLetters(<span class="string">'A2B3'</span>); <span class="comment">// &#123; A: 2, B: 3 &#125;</span></span><br><span class="line">  countOfLetters(<span class="string">'A(A3B)2'</span>); <span class="comment">// &#123; A: 7, B: 2 &#125;</span></span><br><span class="line">  countOfLetters(<span class="string">'C4(A(A3B)2)2'</span>); <span class="comment">// &#123; A: 14, B: 4, C: 4 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countOfLetters</span>(<span class="params">letters, res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/** 代码实现 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题面试的时候完全没思路，之后搜索了一下，发现跟 LeetCode 上的一道算法题类似类似 <a href="https://leetcode-cn.com/problems/number-of-atoms/" target="_blank" rel="noopener">726.原子的数量</a> 🤥</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isNum = <span class="function">(<span class="params">a</span>) =&gt;</span> <span class="regexp">/[\d]/</span>.test(a);</span><br><span class="line"><span class="keyword">const</span> isUpper = <span class="function">(<span class="params">a</span>) =&gt;</span> <span class="regexp">/[A-Z]/</span>.test(a);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countOfLetters</span>(<span class="params">formula</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> stack = [];</span><br><span class="line">  <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line">  stack.push([]);</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> getNums = <span class="function">(<span class="params">index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> num = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">while</span> (isNum(formula[index])) &#123;</span><br><span class="line">      num += formula[index];</span><br><span class="line">      index++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (i &lt; formula.length) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isUpper(formula[i])) &#123;</span><br><span class="line">      <span class="keyword">let</span> atom = formula[i];</span><br><span class="line">      i += atom.length;</span><br><span class="line">      <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">      obj[<span class="string">"name"</span>] = atom;</span><br><span class="line">      <span class="keyword">if</span> (isNum(formula[i])) &#123;</span><br><span class="line">        <span class="keyword">let</span> num = getNums(i);</span><br><span class="line">        i += num.length;</span><br><span class="line">        obj[<span class="string">"value"</span>] = <span class="built_in">Number</span>(num);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        obj[<span class="string">"value"</span>] = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      stack[stack.length - <span class="number">1</span>].push(obj);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (formula[i] === <span class="string">"("</span>) &#123;</span><br><span class="line">      stack.push([]);</span><br><span class="line">      i++;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (formula[i] === <span class="string">")"</span>) &#123;</span><br><span class="line">      i++;</span><br><span class="line">      <span class="keyword">let</span> multi = getNums(i);</span><br><span class="line">      i += multi.length;</span><br><span class="line">      <span class="keyword">let</span> left = stack[stack.length - <span class="number">2</span>];</span><br><span class="line">      <span class="keyword">let</span> right = stack[stack.length - <span class="number">1</span>];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; right.length; ++j) &#123;</span><br><span class="line">        <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">        obj[<span class="string">"value"</span>] = multi * right[j].value;</span><br><span class="line">        obj[<span class="string">"name"</span>] = right[j].name;</span><br><span class="line">        left.push(obj);</span><br><span class="line">      &#125;</span><br><span class="line">      stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// console.log(stack[0])</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; stack[<span class="number">0</span>].length; ++i) &#123;</span><br><span class="line">    obj[stack[<span class="number">0</span>][i].name] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; stack[<span class="number">0</span>].length; ++i) &#123;</span><br><span class="line">    obj[stack[<span class="number">0</span>][i].name] += stack[<span class="number">0</span>][i].value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res = countOfLetters(<span class="string">"C4(A(A3B)2)2"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br></pre></td></tr></table></figure><h2 id="二-防抖节流，力争上游"><a href="#二-防抖节流，力争上游" class="headerlink" title="(二) 防抖节流，力争上游"></a>(二) 防抖节流，力争上游</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">实现一个<span class="string">`Foo`</span>方法，接受函数<span class="string">`func`</span>和时间<span class="string">`wait`</span>，返回一个新函数，新函数即时连续多次执行，但也只限制在<span class="string">`wait`</span>的时间执行一次。</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* 代码实现 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题是常见的防抖节流函数，需要牢牢掌握啊。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timeout;</span><br><span class="line">  <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (timeout) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      func.call(<span class="keyword">this</span>, args);</span><br><span class="line">      clearTimeout(timeout);</span><br><span class="line">    &#125;, wait);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三-递归递归，学会不亏"><a href="#三-递归递归，学会不亏" class="headerlink" title="(三) 递归递归，学会不亏"></a>(三) 递归递归，学会不亏</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">对象扁平化</span><br><span class="line">  说明：请实现 flatten(input) 函数，input 为一个 javascript 对象（<span class="built_in">Object</span> 或者 <span class="built_in">Array</span>），返回值为扁平化后的结果。</span><br><span class="line">  示例：</span><br><span class="line">    <span class="keyword">var</span> input = &#123;</span><br><span class="line">      a: <span class="number">1</span>,</span><br><span class="line">      b: [ <span class="number">1</span>, <span class="number">2</span>, &#123; <span class="attr">c</span>: <span class="literal">true</span> &#125;, [ <span class="number">3</span> ] ],</span><br><span class="line">      d: &#123; <span class="attr">e</span>: <span class="number">2</span>, <span class="attr">f</span>: <span class="number">3</span> &#125;,</span><br><span class="line">      g: <span class="literal">null</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> output = flatten(input);</span><br><span class="line">    output如下</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"a"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="string">"b[0]"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="string">"b[1]"</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="string">"b[2].c"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">"b[3][0]"</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="string">"d.e"</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="string">"d.f"</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="comment">// "g": null,  值为null或者undefined，丢弃</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/** 代码实现 */</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>递归思想实现对象的扁平化。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">obj, parentKey = <span class="string">""</span>, result = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">      <span class="keyword">let</span> keyName = <span class="string">`<span class="subst">$&#123;parentKey&#125;</span><span class="subst">$&#123;key&#125;</span>`</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[key] === <span class="string">"object"</span>) &#123;</span><br><span class="line">        flatten(obj[key], keyName + <span class="string">"."</span>, result);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result[keyName] = obj[key];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前段时间做了三道阿里的在线面试题，分享一下。&lt;/p&gt;&lt;h2 id=&quot;一-身为前端，我很抱歉&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
      <category term="面试" scheme="https://coldstone.fun/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="Interview" scheme="https://coldstone.fun/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>使用 Github Action 发布 Flutter 插件</title>
    <link href="https://coldstone.fun/post/2020/07/28/github-action-publish-flutter-plugin/"/>
    <id>https://coldstone.fun/post/2020/07/28/github-action-publish-flutter-plugin/</id>
    <published>2020-07-28T06:49:16.000Z</published>
    <updated>2020-12-07T01:51:26.703Z</updated>
    
    <content type="html"><![CDATA[<p>本文说明如何使用 Github Actions 自动发布 Flutter 插件到 pub.dev</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>笔者有发布过几个 Flutter 插件，一直在手动更新。手动更新插件有点麻烦且容易失败（需要科学上网），因此研究了下如何使用 <a href="https://help.github.com/en/actions" target="_blank" rel="noopener">Github Actions</a>（Github 提供的一种 CI/CD 服务）自动发布插件到 pub.dev，这样做的好处有</p><ol><li>避免手动发布，节约上传时间</li><li>在 Github 合并别人提交的代码后也可以立即发布</li></ol><p>以下说明如何进行</p><h2 id="添加流程"><a href="#添加流程" class="headerlink" title="添加流程"></a>添加流程</h2><p>首先在插件的 <code>.github/workflows</code> 目录内创建一个配置文件 <code>publish.yml</code>。</p><p><img src="./images/github-action-publish-flutter-plugin/publish.png" alt="publish"></p><p>内容如下</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Publish</span> <span class="string">to</span> <span class="string">Pub.dev</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 流程触发时机，当有标签创建时触发，如 v1.0.0。当然也可以选择别的触发时机，如 push，release 等</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">create</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">publishing:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># 拉取仓库代码</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">"Checkout"</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="comment"># 发布插件</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Dart</span> <span class="string">and</span> <span class="string">Flutter</span> <span class="string">Package</span> <span class="string">Publisher</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">k-paxian/dart-package-publisher@v1.2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># 设置发布插件需要的 Token</span></span><br><span class="line">          <span class="attr">accessToken:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.OAUTH_ACCESS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">refreshToken:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.OAUTH_REFRESH_TOKEN</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>流程中需要设置 <code>OAUTH_ACCESS_TOKEN</code> 和 <code>OAUTH_REFRESH_TOKEN</code> 这两个 Token，他们在 <code>.pub-cache/credentials.json</code> 的文件内，这个文件是第一次手动发布插件成功后自动生成的，在用户的 home 目录或者是安装 Flutter SDK 目录内。</p><p><img src="./images/github-action-publish-flutter-plugin/credentials.png" alt="credentials"></p><p>拿到 Token 后去插件仓库添加以上两个 Secret，至此配置工作已完成 🎉</p><p><img src="./images/github-action-publish-flutter-plugin/secrets.png" alt="secrets"></p><h2 id="发布插件"><a href="#发布插件" class="headerlink" title="发布插件"></a>发布插件</h2><p>现在每次更新插件只需要新增标签然后推送到仓库，就可以自动更新插件啦！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git tag v1.0.1</span><br><span class="line"></span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure><p><img src="./images/github-action-publish-flutter-plugin/action.png" alt="action"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/marketplace/actions/dart-and-flutter-package-publisher" target="_blank" rel="noopener">Dart and Flutter Package Publisher</a></p><p>第一次发布插件看这里 <a href="https://flutter.cn/docs/development/packages-and-plugins/developing-packages" target="_blank" rel="noopener">Publishing your package</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文说明如何使用 Github Actions 自动发布 Flutter 插件到 pub.dev&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Flutter" scheme="https://coldstone.fun/tags/Flutter/"/>
    
      <category term="Github" scheme="https://coldstone.fun/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 绘制三角网格 Triangular Mesh</title>
    <link href="https://coldstone.fun/post/2020/07/14/flutter-generative-artistry-02/"/>
    <id>https://coldstone.fun/post/2020/07/14/flutter-generative-artistry-02/</id>
    <published>2020-07-14T09:56:19.000Z</published>
    <updated>2020-12-07T01:51:26.699Z</updated>
    
    <content type="html"><![CDATA[<p><img src="./images/flutter-generative-artistry-02/cover.png" alt="Triangular Mesh"></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文实现 <a href="https://generativeartistry.com/tutorials/" target="_blank" rel="noopener">Generative Artistry</a> 教程的第 4 篇图形 Triangular mesh 效果如下。</p><img src="./images/flutter-generative-artistry-02/colors.png" width="580" style="width:290px"><p>没按顺序来，因为第二篇 Joy Division 我还没实现 😝</p><h2 id="创建画布"><a href="#创建画布" class="headerlink" title="创建画布"></a>创建画布</h2><p>首先创建一个用于绘制的画布，然后实现 <code>TriangularMeshPainter</code> 的 <code>paint</code> 方法。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TriangularMesh</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> CustomPaint(</span><br><span class="line">      painter: TriangularMeshPainter(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TriangularMeshPainter</span> <span class="keyword">extends</span> <span class="title">CustomPainter</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;&#125;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> shouldRepaint(TriangularMeshPainter oldDelegate) =&gt; <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="绘制端点"><a href="#绘制端点" class="headerlink" title="绘制端点"></a>绘制端点</h2><p>声明一个 <code>gap</code> 变量等比分割画布，在纵轴，横轴方向每隔 <code>gap</code> 长度使用 <code>canvas.drawCircle</code> 方法绘制圆点。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TriangularMeshPainter</span> <span class="keyword">extends</span> <span class="title">CustomPainter</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">    <span class="comment">// 声明 line 和 lines 变量存储点和线</span></span><br><span class="line">    <span class="built_in">List</span> line;</span><br><span class="line">    <span class="built_in">List</span> lines = [];</span><br><span class="line">    <span class="built_in">double</span> gap = size.width / <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置点的绘制属性</span></span><br><span class="line">    Paint paint = Paint()</span><br><span class="line">      ..color = Colors.black</span><br><span class="line">      ..isAntiAlias = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 纵轴方向</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">double</span> y = gap / <span class="number">2</span>; y &lt;= size.height; y += gap) &#123;</span><br><span class="line">      line = [];</span><br><span class="line">      <span class="comment">// 横轴方向</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">double</span> x = gap / <span class="number">4</span>; x &lt;= size.width; x += gap) &#123;</span><br><span class="line">        line.add(&#123;<span class="string">"x"</span>: x, <span class="string">"y"</span>: y&#125;);</span><br><span class="line">        <span class="comment">// 绘制圆，参数分别是圆点位置，圆的半径，绘制属性</span></span><br><span class="line">        canvas.drawCircle(Offset(x, y), <span class="number">1</span>, paint);</span><br><span class="line">      &#125;</span><br><span class="line">      lines.add(line);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="./images/flutter-generative-artistry-02/circle.png" width="580" style="width:290px"><p>创建一个 <code>Point</code> 类，表示一个绘制的圆点。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="built_in">double</span> x;</span><br><span class="line">  <span class="built_in">double</span> y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了使点之间形成三角形，使用一个 <code>odd</code> 变量，在每次添加圆点的时候改变点的横轴值，形成交错效果。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">  <span class="built_in">bool</span> odd = <span class="keyword">false</span>;</span><br><span class="line">  <span class="built_in">List</span>&lt;Point&gt; line;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;Point&gt;&gt; lines = [];</span><br><span class="line">  <span class="built_in">double</span> gap = size.width / <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">  Paint paint = Paint()</span><br><span class="line">    ..color = Colors.black</span><br><span class="line">    ..isAntiAlias = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">double</span> y = gap / <span class="number">2</span>; y &lt;= size.height; y += gap) &#123;</span><br><span class="line">    <span class="comment">// 每次添加圆点之前对 odd 取反</span></span><br><span class="line">    odd = !odd;</span><br><span class="line">    line = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">double</span> x = gap / <span class="number">4</span>; x &lt;= size.width; x += gap) &#123;</span><br><span class="line">      Point point = Point();</span><br><span class="line">      <span class="comment">// 赋值圆点横轴位置时根据 odd 变量判断是否需要增加距离</span></span><br><span class="line">      point.x = x + (odd ? gap / <span class="number">2</span> : <span class="number">0</span>);</span><br><span class="line">      point.y = y;</span><br><span class="line">      <span class="comment">// 将点添加到 line 数组</span></span><br><span class="line">      line.add(point);</span><br><span class="line">      canvas.drawCircle(Offset(point.x, point.y), <span class="number">1</span>, paint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    lines.add(line);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="./images/flutter-generative-artistry-02/odd.png" width="580" style="width:290px"><h2 id="绘制网格"><a href="#绘制网格" class="headerlink" title="绘制网格"></a>绘制网格</h2><p>接下来需要建立 3 个点之间的关系，从而绘制三角形。首先创建一个接收三角形三个坐标，并连接绘制它们的函数。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _drawTriangle(Canvas canvas, Point pointA, Point pointB, Point pointC) &#123;</span><br><span class="line">  <span class="comment">// 使用一个路径链接 3 点并绘制这条路径</span></span><br><span class="line">  Path path = Path();</span><br><span class="line">  Paint line = Paint()</span><br><span class="line">    ..color = Colors.black</span><br><span class="line">    ..style = PaintingStyle.stroke</span><br><span class="line">    ..strokeJoin = StrokeJoin.bevel</span><br><span class="line">    ..isAntiAlias = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">  path.moveTo(pointA.x, pointA.y);</span><br><span class="line">  path.lineTo(pointB.x, pointB.y);</span><br><span class="line">  path.lineTo(pointC.x, pointC.y);</span><br><span class="line">  path.lineTo(pointA.x, pointA.y);</span><br><span class="line">  <span class="comment">// 参数分别是路径，路径的绘制属性</span></span><br><span class="line">  canvas.drawPath(path, line);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后遍历所有存储的线，并组合相邻线的点以形成三角形。</p><blockquote><p><a href="https://github.com/JChehe/blog/issues/24" target="_blank" rel="noopener">这部分也许会有点难以理解。脚本会遍历所有线，并组合相邻线的点以形成三角形。为了便于理解，我们将相邻的两条线分别称为 a 和 b。然后将两线符合要求的点合并到一个数组中，使其看起来像“之”字型：a1、b1、a2、b2、a3 以此类推。<br>这将为我们提供了一个含有三角形所有坐标的数组。如：[a1, b1, a2]、[b1, a2, b2], [a2, b2, a3] 等。</a></p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">  <span class="comment">///<span class="markdown">...</span></span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">List</span> dotLine;</span><br><span class="line">  odd = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> y = <span class="number">0</span>; y &lt; lines.length - <span class="number">1</span>; y++) &#123;</span><br><span class="line">    odd = !odd;</span><br><span class="line">    dotLine = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lines[y].length; i++) &#123;</span><br><span class="line">      dotLine.add(odd ? lines[y][i] : lines[y + <span class="number">1</span>][i]);</span><br><span class="line">      dotLine.add(odd ? lines[y + <span class="number">1</span>][i] : lines[y][i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; dotLine.length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">      _drawTriangle(canvas, dotLine[i], dotLine[i + <span class="number">1</span>], dotLine[i + <span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="./images/flutter-generative-artistry-02/triangle.png" width="580" style="width:290px"><p>创建圆点时加入随机量，形成不规则的三角形。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">double</span> x = gap / <span class="number">4</span>; x &lt;= size.width; x += gap) &#123;</span><br><span class="line">  Point point = Point();</span><br><span class="line">  <span class="built_in">double</span> random = (Random().nextDouble() * <span class="number">.8</span> - <span class="number">.4</span>) * gap;</span><br><span class="line">  point.x = x + random + (odd ? gap / <span class="number">2</span> : <span class="number">0</span>);</span><br><span class="line">  point.y = y + (Random().nextDouble() * <span class="number">.8</span> - <span class="number">.4</span>) * gap;</span><br><span class="line">  line.add(point);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="./images/flutter-generative-artistry-02/random.png" width="580" style="width:290px"><h2 id="添加颜色"><a href="#添加颜色" class="headerlink" title="添加颜色"></a>添加颜色</h2><p>最后在绘制三角形函数那里加上一些颜色，只需要设置路径的 <code>color</code> 和 <code>style</code> 绘制属性即可。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _drawTriangle(Canvas canvas, Point pointA, Point pointB, Point pointC) &#123;</span><br><span class="line">  Path path = Path();</span><br><span class="line">  Paint fill = Paint()</span><br><span class="line">    <span class="comment">// 添加颜色，可以尝试设置不同的颜色</span></span><br><span class="line">    ..color = Colors.black.withOpacity(Random().nextDouble() * <span class="number">.9</span>)</span><br><span class="line">    <span class="comment">// ..color = colors[Random().nextInt(colors.length)].withOpacity(.8)</span></span><br><span class="line">    <span class="comment">// 将路径的绘制样式设置为 fill</span></span><br><span class="line">    ..style = PaintingStyle.fill</span><br><span class="line">    ..strokeJoin = StrokeJoin.bevel</span><br><span class="line">    ..isAntiAlias = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">  Paint line = Paint()</span><br><span class="line">    ..color = Colors.black</span><br><span class="line">    ..style = PaintingStyle.stroke</span><br><span class="line">    ..strokeJoin = StrokeJoin.bevel</span><br><span class="line">    ..isAntiAlias = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">  path.moveTo(pointA.x, pointA.y);</span><br><span class="line">  path.lineTo(pointB.x, pointB.y);</span><br><span class="line">  path.lineTo(pointC.x, pointC.y);</span><br><span class="line">  path.lineTo(pointA.x, pointA.y);</span><br><span class="line"></span><br><span class="line">  canvas.drawPath(path, fill);</span><br><span class="line">  <span class="comment">// 新增一个路径绘制</span></span><br><span class="line">  canvas.drawPath(path, line);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大功告成！👏</p><img src="./images/flutter-generative-artistry-02/black.png" width="580" style="width:290px"> <img src="./images/flutter-generative-artistry-02/colors.png" width="580" style="width:290px"><p><a href="https://github.com/xrr2016/flutter-generative-artistry/blob/master/lib/graphs/triangular_mesh.dart" target="_blank" rel="noopener">代码地址</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://generativeartistry.com/tutorials/triangular-mesh" target="_blank" rel="noopener">Triangular Mesh</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;./images/flutter-generative-artistry-02/cover.png&quot; alt=&quot;Triangular Mesh&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="教程" scheme="https://coldstone.fun/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Flutter" scheme="https://coldstone.fun/tags/Flutter/"/>
    
      <category term="Generative artistry" scheme="https://coldstone.fun/tags/Generative-artistry/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 绘制瓷砖线 Tiled Lines</title>
    <link href="https://coldstone.fun/post/2020/07/07/flutter-generative-artistry-01/"/>
    <id>https://coldstone.fun/post/2020/07/07/flutter-generative-artistry-01/</id>
    <published>2020-07-07T08:20:50.000Z</published>
    <updated>2020-12-07T01:51:26.699Z</updated>
    
    <content type="html"><![CDATA[<p><img src="./images/flutter-generative-artistry-01/cover.png" alt="tiled-lines"></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前几天发现了一个使用 <code>&lt;canvas&gt;</code> 绘制图形的教程 <a href="https://generativeartistry.com/tutorials/" target="_blank" rel="noopener">generative artistry </a>感觉很有意思，尝试用 Flutter 实现。本文实现第一篇教程的图形 Tiled Lines 效果如下。</p><img src="./images/flutter-generative-artistry-01/tiled-lines.png" width="580" style="width:290px"><h2 id="创建画布"><a href="#创建画布" class="headerlink" title="创建画布"></a>创建画布</h2><p>首先使用一个 <code>Container</code> 控件创建一个 <code>320*320</code> 大小的绘制区域，添加 <code>CustomPaint</code> 画布和一个继承 <code>CustomPainter</code><br>的画笔 <code>TiledLinesPainter</code>。关于 <code>CustomPaint</code> 和 <code>CustomPainter</code> 的知识可以查阅这篇文章 <a href="https://coldstone.fun/post/2020/05/31/flutter-bar-chart">使用 Flutter 绘制图表（一）柱状图 📊</a>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TiledLines</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Container(</span><br><span class="line">          width: <span class="number">320.0</span>,</span><br><span class="line">          height: <span class="number">320.0</span>,</span><br><span class="line">          decoration: BoxDecoration(</span><br><span class="line">            border: Border.all(</span><br><span class="line">              color: Colors.black,</span><br><span class="line">              width: <span class="number">1.0</span>,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          child: CustomPaint(</span><br><span class="line">            painter: TiledLinesPainter(),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TiledLinesPainter</span> <span class="keyword">extends</span> <span class="title">CustomPainter</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> shouldRepaint(TiledLinesPainter oldDelegate) =&gt; <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="./images/flutter-generative-artistry-01/container.png" width="580" style="width:290px"><h2 id="绘制线条"><a href="#绘制线条" class="headerlink" title="绘制线条"></a>绘制线条</h2><p>创建好画布后在 <code>TiledLinesPainter</code> 的 <code>paint</code> 方法里进行绘制。添加一个 <code>_drawLine</code> 方法用来绘制线条，绘制线条需要起始点和终止点，通过参数将数值传入。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TiledLinesPainter</span> <span class="keyword">extends</span> <span class="title">CustomPainter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> _drawLine(</span><br><span class="line">    Canvas canvas,</span><br><span class="line">    <span class="built_in">double</span> x,</span><br><span class="line">    <span class="built_in">double</span> y,</span><br><span class="line">    <span class="built_in">double</span> width,</span><br><span class="line">    <span class="built_in">double</span> height,</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">final</span> Paint paint = Paint()</span><br><span class="line">      ..strokeCap = StrokeCap.square</span><br><span class="line">      ..strokeWidth = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    Offset p1 = Offset(x, y);</span><br><span class="line">    Offset p2 = Offset(x + width, y + height);</span><br><span class="line"></span><br><span class="line">    canvas.drawLine(p1, p2, paint);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">    _drawLine(canvas, <span class="number">0</span>, <span class="number">0</span>, size.width, size.height);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> shouldRepaint(TiledLinesPainter oldDelegate) =&gt; <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="./images/flutter-generative-artistry-01/line.png" width="580" style="width:290px"><h2 id="加入随机性"><a href="#加入随机性" class="headerlink" title="加入随机性"></a>加入随机性</h2><p>使用 <code>Random().nextBool()</code> 方法创建一个随机的布尔值，在绘制线条之前改变起始点和终止点的坐标，这样 <code>_drawLine</code> 方法就有了绘制不同方向的线条的能力。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _drawLine(</span><br><span class="line">    Canvas canvas,</span><br><span class="line">    <span class="built_in">double</span> x,</span><br><span class="line">    <span class="built_in">double</span> y,</span><br><span class="line">    <span class="built_in">double</span> width,</span><br><span class="line">    <span class="built_in">double</span> height,</span><br><span class="line">  ) &#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">bool</span> isLeftToRight = Random().nextBool();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> Paint paint = Paint()</span><br><span class="line">    ..strokeCap = StrokeCap.square</span><br><span class="line">    ..strokeWidth = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  Offset p1;</span><br><span class="line">  Offset p2;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isLeftToRight) &#123;</span><br><span class="line">    p1 = Offset(x, y);</span><br><span class="line">    p2 = Offset(x + width, y + height);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    p1 = Offset(x + width, y);</span><br><span class="line">    p2 = Offset(x, y + height);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  canvas.drawLine(p1, p2, paint);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="./images/flutter-generative-artistry-01/line2.png" width="580" style="width:290px"><h2 id="绘制更多的线条"><a href="#绘制更多的线条" class="headerlink" title="绘制更多的线条"></a>绘制更多的线条</h2><p>可以绘制更多的线条喽！给 <code>TiledLinesPainter</code> 添加一个 <code>step</code> 属性，表示在画布上每隔多长距离绘制一条线。使用 <code>step</code> 将画布分割为多个小的方格，在每个小的方格里面绘制线条。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TiledLinesPainter</span> <span class="keyword">extends</span> <span class="title">CustomPainter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> step;</span><br><span class="line"></span><br><span class="line">  TiledLinesPainter(<span class="keyword">this</span>.step);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _drawLine(</span><br><span class="line">    Canvas canvas,</span><br><span class="line">    <span class="built_in">double</span> x,</span><br><span class="line">    <span class="built_in">double</span> y,</span><br><span class="line">    <span class="built_in">double</span> width,</span><br><span class="line">    <span class="built_in">double</span> height,</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">bool</span> isLeftToRight = Random().nextBool();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Paint paint = Paint()</span><br><span class="line">      ..strokeCap = StrokeCap.square</span><br><span class="line">      ..strokeWidth = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    Offset p1;</span><br><span class="line">    Offset p2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isLeftToRight) &#123;</span><br><span class="line">      p1 = Offset(x, y);</span><br><span class="line">      p2 = Offset(x + width, y + height);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      p1 = Offset(x + width, y);</span><br><span class="line">      p2 = Offset(x, y + height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    canvas.drawLine(p1, p2, paint);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">double</span> x = <span class="number">0</span>; x &lt; size.width; x += step) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">double</span> y = <span class="number">0</span>; y &lt; size.height; y += step) &#123;</span><br><span class="line">        _drawLine(canvas, x, y, step, step);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> shouldRepaint(TiledLinesPainter oldDelegate) =&gt; <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">TiledLinesPainter(<span class="number">20</span>)</span><br></pre></td></tr></table></figure><img src="./images/flutter-generative-artistry-01/step.png" width="580" style="width:290px"><h2 id="绘制边框和阴影"><a href="#绘制边框和阴影" class="headerlink" title="绘制边框和阴影"></a>绘制边框和阴影</h2><p>最后给画布添加边框和阴影效果，大功告成！👏 感谢阅读。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:math'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TiledLines</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="built_in">List</span>&lt;BoxShadow&gt; shadows = [];</span><br><span class="line">    <span class="built_in">double</span> opacity = <span class="number">0.1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加画布阴影</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">double</span> i = <span class="number">1</span>; i &lt;= <span class="number">16</span>; i++) &#123;</span><br><span class="line">      opacity -= <span class="number">0.01</span>;</span><br><span class="line">      opacity = opacity &gt; <span class="number">0.01</span> ? opacity : <span class="number">0.01</span>;</span><br><span class="line"></span><br><span class="line">      shadows.add(</span><br><span class="line">        BoxShadow(</span><br><span class="line">          offset: Offset(-i, i),</span><br><span class="line">          color: Color.fromRGBO(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, opacity),</span><br><span class="line">          blurRadius: <span class="number">2</span>,</span><br><span class="line">          spreadRadius: <span class="number">1</span>,</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Container(</span><br><span class="line">          width: <span class="number">320.0</span>,</span><br><span class="line">          height: <span class="number">320.0</span>,</span><br><span class="line">          decoration: BoxDecoration(</span><br><span class="line">            <span class="comment">// 添加画布边框</span></span><br><span class="line">            border: Border.all(</span><br><span class="line">              color: Colors.black,</span><br><span class="line">              width: <span class="number">20.0</span>,</span><br><span class="line">            ),</span><br><span class="line">            boxShadow: shadows,</span><br><span class="line">          ),</span><br><span class="line">          child: Container(</span><br><span class="line">            color: Colors.white,</span><br><span class="line">            padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">20.0</span>),</span><br><span class="line">            child: CustomPaint(</span><br><span class="line">              painter: TiledLinesPainter(<span class="number">20</span>),</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TiledLinesPainter</span> <span class="keyword">extends</span> <span class="title">CustomPainter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> step;</span><br><span class="line"></span><br><span class="line">  TiledLinesPainter(<span class="keyword">this</span>.step);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _drawLine(</span><br><span class="line">    Canvas canvas,</span><br><span class="line">    <span class="built_in">double</span> x,</span><br><span class="line">    <span class="built_in">double</span> y,</span><br><span class="line">    <span class="built_in">double</span> width,</span><br><span class="line">    <span class="built_in">double</span> height,</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">// 创建随机性</span></span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">bool</span> isLeftToRight = Random().nextBool();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Paint paint = Paint()</span><br><span class="line">      ..strokeCap = StrokeCap.square</span><br><span class="line">      ..strokeWidth = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    Offset p1;</span><br><span class="line">    Offset p2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置线条的起始点和终止点</span></span><br><span class="line">    <span class="keyword">if</span> (isLeftToRight) &#123;</span><br><span class="line">      p1 = Offset(x, y);</span><br><span class="line">      p2 = Offset(x + width, y + height);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      p1 = Offset(x + width, y);</span><br><span class="line">      p2 = Offset(x, y + height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    canvas.drawLine(p1, p2, paint);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">    <span class="comment">// 使用 step 分割画布，创建小的绘制方格</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">double</span> x = <span class="number">0</span>; x &lt; size.width; x += step) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">double</span> y = <span class="number">0</span>; y &lt; size.height; y += step) &#123;</span><br><span class="line">        _drawLine(canvas, x, y, step, step);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> shouldRepaint(TiledLinesPainter oldDelegate) =&gt; <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="./images/flutter-generative-artistry-01/tiled-lines.png" width="580" style="width:290px"><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://generativeartistry.com/tutorials/tiled-lines/" target="_blank" rel="noopener">Tiled Lines</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;./images/flutter-generative-artistry-01/cover.png&quot; alt=&quot;tiled-lines&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="教程" scheme="https://coldstone.fun/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Flutter" scheme="https://coldstone.fun/tags/Flutter/"/>
    
      <category term="Generative artistry" scheme="https://coldstone.fun/tags/Generative-artistry/"/>
    
  </entry>
  
  <entry>
    <title>用 Flutter 实现探探卡片布局</title>
    <link href="https://coldstone.fun/post/2020/06/18/flutter-tinder-card/"/>
    <id>https://coldstone.fun/post/2020/06/18/flutter-tinder-card/</id>
    <published>2020-06-18T04:22:08.000Z</published>
    <updated>2020-12-07T01:51:26.703Z</updated>
    
    <content type="html"><![CDATA[<p><img src="./images/flutter-tinder-card/cover.png" alt="cards"></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前几天写了一个 Fluter 插件 <a href="https://github.com/xrr2016/tcard" target="_blank" rel="noopener">tcard</a>，用来实现类似于探探卡片的布局。效果如下，本文讲解如何使用 <code>Stack</code> 控件实现这个布局。</p><img src="./images/flutter-tinder-card/images.gif" width="900" style="width:500px"><p><a href="https://dartpad.dev/efe152273d6835af5cec6d8f40ab0c58" target="_blank" rel="noopener">在线查看</a></p><h2 id="初识-Stack"><a href="#初识-Stack" class="headerlink" title="初识 Stack"></a>初识 Stack</h2><p><code>Stack</code> 是一个有多子项的控件，它会将自己的子项相对于自身边缘进行定位，后面的子项会覆盖前面的子项。通常用来实现将一个控件覆盖于另一个控件之上的布局，比如在一张图片上显示一些文字。子项的默认位置在 <code>Stack</code> 左上角，也可以用 <code>Align</code> 或者 <code>Positioned</code> 控件分别进行定位。</p><img src="https://flutter.github.io/assets-for-api-docs/assets/widgets/stack.png" style="width:520px"><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Stack(</span><br><span class="line">  children: &lt;Widget&gt;[</span><br><span class="line">    Container(</span><br><span class="line">      width: <span class="number">100</span>,</span><br><span class="line">      height: <span class="number">100</span>,</span><br><span class="line">      color: Colors.red,</span><br><span class="line">    ),</span><br><span class="line">    Container(</span><br><span class="line">      width: <span class="number">90</span>,</span><br><span class="line">      height: <span class="number">90</span>,</span><br><span class="line">      color: Colors.green,</span><br><span class="line">    ),</span><br><span class="line">    Container(</span><br><span class="line">      width: <span class="number">80</span>,</span><br><span class="line">      height: <span class="number">80</span>,</span><br><span class="line">      color: Colors.blue,</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><a href="https://youtu.be/liEGSeD3Zt8" target="_blank" rel="noopener">Stack (Flutter Widget of the Week)</a></p><h2 id="布局思路"><a href="#布局思路" class="headerlink" title="布局思路"></a>布局思路</h2><p>要使用 <code>Stack</code> 实现这个卡片布局的大致思路如下</p><ol><li>首先需要前，中，后三个子控件，使用 <code>Align</code> 控件定位在容器中。</li><li>需要一个手势监听器 <code>GestureDetector</code> 监听手指滑动。</li><li>监听手指在屏幕上滑动同时更新最前面卡片的位置。</li><li>判断移动的横轴距离进行卡片位置变换动画或者卡片回弹动画。</li><li>如果运行了卡片位置变换动画在动画结束后更新卡片的索引值。</li></ol><h2 id="卡片布局"><a href="#卡片布局" class="headerlink" title="卡片布局"></a>卡片布局</h2><ol><li>创建 <code>Stack</code> 容器以及前，中，后三个子控件</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _MyAppState createState() =&gt; _MyAppState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyApp</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">//  前面的卡片，使用 Align 定位</span></span><br><span class="line">  Widget _frontCard() &#123;</span><br><span class="line">    <span class="keyword">return</span> Align(</span><br><span class="line">      child: Container(</span><br><span class="line">        color: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 中间的卡片，使用 Align 定位</span></span><br><span class="line">  Widget _middleCard() &#123;</span><br><span class="line">    <span class="keyword">return</span> Align(</span><br><span class="line">      child: Container(</span><br><span class="line">        color: Colors.red,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 后面的卡片，使用 Align 定位</span></span><br><span class="line">  Widget _backCard() &#123;</span><br><span class="line">    <span class="keyword">return</span> Align(</span><br><span class="line">      child: Container(</span><br><span class="line">        color: Colors.green,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'TCards demo'</span>,</span><br><span class="line">      debugShowCheckedModeBanner: <span class="keyword">false</span>,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: Center(</span><br><span class="line">          child: SizedBox(</span><br><span class="line">            width: <span class="number">300</span>,</span><br><span class="line">            height: <span class="number">400</span>,</span><br><span class="line">            child: Stack(</span><br><span class="line">              children: [</span><br><span class="line">                <span class="comment">// 后面的子项会显示在上面，所以前面的卡片放在最后</span></span><br><span class="line">                _backCard(),</span><br><span class="line">                _middleCard(),</span><br><span class="line">                _frontCard(),</span><br><span class="line">              ],</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="./images/flutter-tinder-card/stack.png" width="560" style="width:280px"><ol start="2"><li>对子控件分别定位并设置其尺寸</li></ol><p>定位需要设置 <code>Align</code> 控件的 alignment 属性，传入一个 <code>Alignment(x, y)</code> 进行设置。设置尺寸需要使用 <code>LayoutBuilder</code> 获取当前父容器的尺寸，然后根据容器尺寸进行计算。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyApp</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">//  前面的卡片，使用 Align 定位</span></span><br><span class="line">  Widget _frontCard(BoxConstraints constraints) &#123;</span><br><span class="line">    <span class="keyword">return</span> Align(</span><br><span class="line">      alignment: Alignment(<span class="number">0.0</span>, <span class="number">-0.5</span>),</span><br><span class="line">      <span class="comment">// 使用 SizedBox 确定卡片尺寸</span></span><br><span class="line">      child: SizedBox.fromSize(</span><br><span class="line">        <span class="comment">// 计算卡片尺寸，相对于父容器</span></span><br><span class="line">        size: Size(constraints.maxWidth * <span class="number">0.9</span>, constraints.maxHeight * <span class="number">0.9</span>),</span><br><span class="line">        child: Container(</span><br><span class="line">          color: Colors.blue,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 中间的卡片，使用 Align 定位</span></span><br><span class="line">  Widget _middleCard(BoxConstraints constraints) &#123;</span><br><span class="line">    <span class="keyword">return</span> Align(</span><br><span class="line">      alignment: Alignment(<span class="number">0.0</span>, <span class="number">0.0</span>),</span><br><span class="line">      child: SizedBox.fromSize(</span><br><span class="line">        <span class="comment">// 计算卡片尺寸，相对于父容器</span></span><br><span class="line">        size: Size(constraints.maxWidth * <span class="number">0.85</span>, constraints.maxHeight * <span class="number">0.9</span>),</span><br><span class="line">        child: Container(</span><br><span class="line">          color: Colors.red,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 后面的卡片，使用 Align 定位</span></span><br><span class="line">  Widget _backCard(BoxConstraints constraints) &#123;</span><br><span class="line">    <span class="keyword">return</span> Align(</span><br><span class="line">      alignment: Alignment(<span class="number">0.0</span>, <span class="number">0.5</span>),</span><br><span class="line">      child: SizedBox.fromSize(</span><br><span class="line">        <span class="comment">// 计算卡片尺寸，相对于父容器</span></span><br><span class="line">        size: Size(constraints.maxWidth * <span class="number">0.8</span>, constraints.maxHeight * <span class="number">.9</span>),</span><br><span class="line">        child: Container(</span><br><span class="line">          color: Colors.green,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'TCards demo'</span>,</span><br><span class="line">      debugShowCheckedModeBanner: <span class="keyword">false</span>,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: Center(</span><br><span class="line">          child: SizedBox(</span><br><span class="line">            width: <span class="number">300</span>,</span><br><span class="line">            height: <span class="number">400</span>,</span><br><span class="line">            child: LayoutBuilder(</span><br><span class="line">              builder: (context, constraints) &#123;</span><br><span class="line">                <span class="comment">// 使用 LayoutBuilder 获取容器的尺寸，传个子项计算卡片尺寸</span></span><br><span class="line">                <span class="keyword">return</span> Stack(</span><br><span class="line">                  children: [</span><br><span class="line">                    <span class="comment">// 后面的子项会显示在上面，所以前面的卡片放在最后</span></span><br><span class="line">                    _backCard(constraints),</span><br><span class="line">                    _middleCard(constraints),</span><br><span class="line">                    _frontCard(constraints),</span><br><span class="line">                  ],</span><br><span class="line">                );</span><br><span class="line">              &#125;,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="./images/flutter-tinder-card/align.png" width="560" style="width:280px"><ol start="3"><li>更新最前面卡片位置</li></ol><p>向 <code>Stack</code> 容器添加一个 <code>GestureDetector</code>，手指在屏幕上移动时更新最前面卡片的位置。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyApp</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// 保存最前面卡片的定位</span></span><br><span class="line">  Alignment _frontCardAlignment = Alignment(<span class="number">0.0</span>, <span class="number">-0.5</span>);</span><br><span class="line">  <span class="comment">// 保存最前面卡片的旋转角度</span></span><br><span class="line">  <span class="built_in">double</span> _frontCardRotation = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  前面的卡片，使用 Align 定位</span></span><br><span class="line">  Widget _frontCard(BoxConstraints constraints) &#123;</span><br><span class="line">    <span class="keyword">return</span> Align(</span><br><span class="line">      alignment: _frontCardAlignment,</span><br><span class="line">      <span class="comment">// 使用 Transform.rotate 旋转卡片</span></span><br><span class="line">      child: Transform.rotate(</span><br><span class="line">        angle: (pi / <span class="number">180.0</span>) * _frontCardRotation,</span><br><span class="line">        <span class="comment">// 使用 SizedBox 确定卡片尺寸</span></span><br><span class="line">        child: SizedBox.fromSize(</span><br><span class="line">          size: Size(constraints.maxWidth * <span class="number">0.9</span>, constraints.maxHeight * <span class="number">0.9</span>),</span><br><span class="line">          child: Container(</span><br><span class="line">            color: Colors.blue,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 省略......</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'TCards demo'</span>,</span><br><span class="line">      debugShowCheckedModeBanner: <span class="keyword">false</span>,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: Center(</span><br><span class="line">          child: SizedBox(</span><br><span class="line">            width: <span class="number">300</span>,</span><br><span class="line">            height: <span class="number">400</span>,</span><br><span class="line">            child: LayoutBuilder(</span><br><span class="line">              builder: (context, constraints) &#123;</span><br><span class="line">                <span class="comment">// 使用 LayoutBuilder 获取容器的尺寸，传个子项计算卡片尺寸</span></span><br><span class="line">                Size size = MediaQuery.of(context).size;</span><br><span class="line">                <span class="built_in">double</span> speed = <span class="number">10.0</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> Stack(</span><br><span class="line">                  children: [</span><br><span class="line">                    <span class="comment">// 后面的子项会显示在上面，所以前面的卡片放在最后</span></span><br><span class="line">                    _backCard(constraints),</span><br><span class="line">                    _middleCard(constraints),</span><br><span class="line">                    _frontCard(constraints),</span><br><span class="line">                    <span class="comment">// 使用一个占满父元素的 GestureDetector 监听手指移动</span></span><br><span class="line">                    SizedBox.expand(</span><br><span class="line">                      child: GestureDetector(</span><br><span class="line">                        onPanDown: (DragDownDetails details) &#123;&#125;,</span><br><span class="line">                        onPanUpdate: (DragUpdateDetails details) &#123;</span><br><span class="line">                          <span class="comment">// 手指移动就更新最前面卡片的 alignment 属性</span></span><br><span class="line">                          _frontCardAlignment += Alignment(</span><br><span class="line">                            details.delta.dx / (size.width / <span class="number">2</span>) * speed,</span><br><span class="line">                            details.delta.dy / (size.height / <span class="number">2</span>) * speed,</span><br><span class="line">                          );</span><br><span class="line">                          <span class="comment">// 设置最前面卡片的旋转角度</span></span><br><span class="line">                          _frontCardRotation = _frontCardAlignment.x;</span><br><span class="line">                          <span class="comment">// setState 更新界面</span></span><br><span class="line">                          setState(() &#123;&#125;);</span><br><span class="line">                        &#125;,</span><br><span class="line">                        onPanEnd: (DragEndDetails details) &#123;&#125;,</span><br><span class="line">                      ),</span><br><span class="line">                    ),</span><br><span class="line">                  ],</span><br><span class="line">                );</span><br><span class="line">              &#125;,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="./images/flutter-tinder-card/pan.gif" width="260" style="width:280px"><h2 id="卡片动画"><a href="#卡片动画" class="headerlink" title="卡片动画"></a>卡片动画</h2><p>这个布局有三种动画，最前面卡片移开的动画；后面两张卡片位置和尺寸变化的动画；最前面卡片回到原位的动画。</p><ol><li>判断卡片横轴移动距离</li></ol><p>在手指离开屏幕时判断卡片横轴的移动距离，如果最前面的卡片横轴移动距离超过限制就运行换位动画，否则运行回弹动画。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 改变位置的动画</span></span><br><span class="line"><span class="keyword">void</span> _runChangeOrderAnimation() &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 卡片回弹的动画</span></span><br><span class="line"><span class="keyword">void</span> _runReboundAnimation(Offset pixelsPerSecond, Size size) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 卡片横轴距离限制</span></span><br><span class="line"><span class="keyword">final</span> <span class="built_in">double</span> limit = <span class="number">10.0</span>;</span><br><span class="line"></span><br><span class="line">SizedBox.expand(</span><br><span class="line">  child: GestureDetector(</span><br><span class="line">    <span class="comment">// 省略...</span></span><br><span class="line">    onPanEnd: (DragEndDetails details) &#123;</span><br><span class="line">      <span class="comment">// 如果最前面的卡片横轴移动距离超过限制就运行换位动画，否则运行回弹动画</span></span><br><span class="line">      <span class="keyword">if</span> (_frontCardAlignment.x &gt; limit ||</span><br><span class="line">          _frontCardAlignment.x &lt; -limit) &#123;</span><br><span class="line">        _runChangeOrderAnimation();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        _runReboundAnimation(</span><br><span class="line">          details.velocity.pixelsPerSecond,</span><br><span class="line">          size,</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure><ol start="2"><li>卡片回弹动画</li></ol><p>首先实现卡片回弹的动画，使用 <code>AnimationController</code> 控制动画，在 <code>initState</code> 初始化动画控制器。创建一个 <code>AlignmentTween</code> 设置动画运动值，起始值是卡片当前位置，最终值是卡片的默认位置。然后将一个弹簧模拟 <code>SpringSimulation</code> 传递给动画控制器，让动画模拟运行。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyApp</span>&gt; <span class="title">with</span> <span class="title">TickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 省略...</span></span><br><span class="line">  <span class="comment">// 卡片回弹动画</span></span><br><span class="line">  Animation&lt;Alignment&gt; _reboundAnimation;</span><br><span class="line">  <span class="comment">// 卡片回弹动画控制器</span></span><br><span class="line">  AnimationController _reboundController;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 省略...</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 卡片回弹的动画</span></span><br><span class="line">  <span class="keyword">void</span> _runReboundAnimation(Offset pixelsPerSecond, Size size) &#123;</span><br><span class="line">    <span class="comment">// 创建动画值</span></span><br><span class="line">    _reboundAnimation = _reboundController.drive(</span><br><span class="line">      AlignmentTween(</span><br><span class="line">        <span class="comment">// 起始值是卡片当前位置，最终值是卡片的默认位置</span></span><br><span class="line">        begin: _frontCardAlignment,</span><br><span class="line">        end: Alignment(<span class="number">0.0</span>, <span class="number">-0.5</span>),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 计算卡片运动速度</span></span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">double</span> unitsPerSecondX = pixelsPerSecond.dx / size.width;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">double</span> unitsPerSecondY = pixelsPerSecond.dy / size.height;</span><br><span class="line">    <span class="keyword">final</span> unitsPerSecond = Offset(unitsPerSecondX, unitsPerSecondY);</span><br><span class="line">    <span class="keyword">final</span> unitVelocity = unitsPerSecond.distance;</span><br><span class="line">    <span class="comment">// 创建弹簧模拟的定义</span></span><br><span class="line">    <span class="keyword">const</span> spring = SpringDescription(mass: <span class="number">30</span>, stiffness: <span class="number">1</span>, damping: <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 创建弹簧模拟</span></span><br><span class="line">    <span class="keyword">final</span> simulation = SpringSimulation(spring, <span class="number">0</span>, <span class="number">1</span>, -unitVelocity);</span><br><span class="line">    <span class="comment">// 根据给定的模拟运行动画</span></span><br><span class="line">    _reboundController.animateWith(simulation);</span><br><span class="line">    <span class="comment">// 重置旋转值</span></span><br><span class="line">    _frontCardRotation = <span class="number">0.0</span>;</span><br><span class="line">    setState(() &#123;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="comment">// 初始化回弹的动画控制器</span></span><br><span class="line">    _reboundController = AnimationController(vsync: <span class="keyword">this</span>)</span><br><span class="line">      ..addListener(() &#123;</span><br><span class="line">        setState(() &#123;</span><br><span class="line">          <span class="comment">// 动画运行时更新最前面卡片的 alignment 属性</span></span><br><span class="line">          _frontCardAlignment = _reboundAnimation.value;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 省略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="./images/flutter-tinder-card/rebound.gif" width="536" style="width:280px"><ol start="3"><li>卡片换位动画</li></ol><p>卡片换位动画就是将最前面的卡片移除可视区，将中间的卡片移动到最前面，将最后的卡片移动到中间，然后新建一个最后面的卡片。在卡片更换位置的同时需要改变卡片的尺寸，位置动画和尺寸动画同时进行。首先定义每个卡片运动时的动画值</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="markdown">卡片尺寸</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CardSizes</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> Size front(BoxConstraints constraints) &#123;</span><br><span class="line">    <span class="keyword">return</span> Size(constraints.maxWidth * <span class="number">0.9</span>, constraints.maxHeight * <span class="number">0.9</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> Size middle(BoxConstraints constraints) &#123;</span><br><span class="line">    <span class="keyword">return</span> Size(constraints.maxWidth * <span class="number">0.85</span>, constraints.maxHeight * <span class="number">0.9</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> Size back(BoxConstraints constraints) &#123;</span><br><span class="line">    <span class="keyword">return</span> Size(constraints.maxWidth * <span class="number">0.8</span>, constraints.maxHeight * <span class="number">.9</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="markdown">卡片位置</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CardAlignments</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> Alignment front = Alignment(<span class="number">0.0</span>, <span class="number">-0.5</span>);</span><br><span class="line">  <span class="keyword">static</span> Alignment middle = Alignment(<span class="number">0.0</span>, <span class="number">0.0</span>);</span><br><span class="line">  <span class="keyword">static</span> Alignment back = Alignment(<span class="number">0.0</span>, <span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="markdown">卡片运动动画</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CardAnimations</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// <span class="markdown">最前面卡片的消失动画值</span></span></span><br><span class="line">  <span class="keyword">static</span> Animation&lt;Alignment&gt; frontCardDisappearAnimation(</span><br><span class="line">    AnimationController parent,</span><br><span class="line">    Alignment beginAlignment,</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> AlignmentTween(</span><br><span class="line">      begin: beginAlignment,</span><br><span class="line">      end: Alignment(</span><br><span class="line">        beginAlignment.x &gt; <span class="number">0</span></span><br><span class="line">            ? beginAlignment.x + <span class="number">30.0</span></span><br><span class="line">            : beginAlignment.x - <span class="number">30.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">      ),</span><br><span class="line">    ).animate(</span><br><span class="line">      CurvedAnimation(</span><br><span class="line">        parent: parent,</span><br><span class="line">        curve: Interval(<span class="number">0.0</span>, <span class="number">0.5</span>, curve: Curves.easeIn),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">中间卡片位置变换动画值</span></span></span><br><span class="line">  <span class="keyword">static</span> Animation&lt;Alignment&gt; middleCardAlignmentAnimation(</span><br><span class="line">    AnimationController parent,</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> AlignmentTween(</span><br><span class="line">      begin: CardAlignments.middle,</span><br><span class="line">      end: CardAlignments.front,</span><br><span class="line">    ).animate(</span><br><span class="line">      CurvedAnimation(</span><br><span class="line">        parent: parent,</span><br><span class="line">        curve: Interval(<span class="number">0.2</span>, <span class="number">0.5</span>, curve: Curves.easeIn),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">中间卡片尺寸变换动画值</span></span></span><br><span class="line">  <span class="keyword">static</span> Animation&lt;Size&gt; middleCardSizeAnimation(</span><br><span class="line">    AnimationController parent,</span><br><span class="line">    BoxConstraints constraints,</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> SizeTween(</span><br><span class="line">      begin: CardSizes.middle(constraints),</span><br><span class="line">      end: CardSizes.front(constraints),</span><br><span class="line">    ).animate(</span><br><span class="line">      CurvedAnimation(</span><br><span class="line">        parent: parent,</span><br><span class="line">        curve: Interval(<span class="number">0.2</span>, <span class="number">0.5</span>, curve: Curves.easeIn),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">最后面卡片位置变换动画值</span></span></span><br><span class="line">  <span class="keyword">static</span> Animation&lt;Alignment&gt; backCardAlignmentAnimation(</span><br><span class="line">    AnimationController parent,</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> AlignmentTween(</span><br><span class="line">      begin: CardAlignments.back,</span><br><span class="line">      end: CardAlignments.middle,</span><br><span class="line">    ).animate(</span><br><span class="line">      CurvedAnimation(</span><br><span class="line">        parent: parent,</span><br><span class="line">        curve: Interval(<span class="number">0.4</span>, <span class="number">0.7</span>, curve: Curves.easeIn),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">最后面卡片尺寸变换动画值</span></span></span><br><span class="line">  <span class="keyword">static</span> Animation&lt;Size&gt; backCardSizeAnimation(</span><br><span class="line">    AnimationController parent,</span><br><span class="line">    BoxConstraints constraints,</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> SizeTween(</span><br><span class="line">      begin: CardSizes.back(constraints),</span><br><span class="line">      end: CardSizes.middle(constraints),</span><br><span class="line">    ).animate(</span><br><span class="line">      CurvedAnimation(</span><br><span class="line">        parent: parent,</span><br><span class="line">        curve: Interval(<span class="number">0.4</span>, <span class="number">0.7</span>, curve: Curves.easeIn),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用一个 <code>AnimationController</code> 控制动画运行，动画运行时在卡片上应用以上的动画值，否则使用卡片默认的位置和尺寸。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyApp</span>&gt; <span class="title">with</span> <span class="title">TickerProviderStateMixin</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 省略...</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 卡片位置变换动画控制器</span></span><br><span class="line">  AnimationController _cardChangeController;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  前面的卡片，使用 Align 定位</span></span><br><span class="line">  Widget _frontCard(BoxConstraints constraints) &#123;</span><br><span class="line">    <span class="comment">// 判断动画是否在运行</span></span><br><span class="line">    <span class="built_in">bool</span> forward = _cardChangeController.status == AnimationStatus.forward;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 Transform.rotate 旋转卡片</span></span><br><span class="line">    Widget rotate = Transform.rotate(</span><br><span class="line">      angle: (pi / <span class="number">180.0</span>) * _frontCardRotation,</span><br><span class="line">      <span class="comment">// 使用 SizedBox 确定卡片尺寸</span></span><br><span class="line">      child: SizedBox.fromSize(</span><br><span class="line">        size: CardSizes.front(constraints),</span><br><span class="line">        child: Container(</span><br><span class="line">          color: Colors.blue,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在动画运行时使用动画值</span></span><br><span class="line">    <span class="keyword">if</span> (forward) &#123;</span><br><span class="line">      <span class="keyword">return</span> Align(</span><br><span class="line">        alignment: CardAnimations.frontCardDisappearAnimation(</span><br><span class="line">          _cardChangeController,</span><br><span class="line">          _frontCardAlignment,</span><br><span class="line">        ).value,</span><br><span class="line">        child: rotate,</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 否则使用默认值</span></span><br><span class="line">    <span class="keyword">return</span> Align(</span><br><span class="line">      alignment: _frontCardAlignment,</span><br><span class="line">      child: rotate,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 中间的卡片，使用 Align 定位</span></span><br><span class="line">  Widget _middleCard(BoxConstraints constraints) &#123;</span><br><span class="line">    <span class="comment">// 判断动画是否在运行</span></span><br><span class="line">    <span class="built_in">bool</span> forward = _cardChangeController.status == AnimationStatus.forward;</span><br><span class="line">    Widget child = Container(color: Colors.red);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在动画运行时使用动画值</span></span><br><span class="line">    <span class="keyword">if</span> (forward) &#123;</span><br><span class="line">      <span class="keyword">return</span> Align(</span><br><span class="line">        alignment: CardAnimations.middleCardAlignmentAnimation(</span><br><span class="line">          _cardChangeController,</span><br><span class="line">        ).value,</span><br><span class="line">        child: SizedBox.fromSize(</span><br><span class="line">          size: CardAnimations.middleCardSizeAnimation(</span><br><span class="line">            _cardChangeController,</span><br><span class="line">            constraints,</span><br><span class="line">          ).value,</span><br><span class="line">          child: child,</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 否则使用默认值</span></span><br><span class="line">    <span class="keyword">return</span> Align(</span><br><span class="line">      alignment: CardAlignments.middle,</span><br><span class="line">      child: SizedBox.fromSize(</span><br><span class="line">        size: CardSizes.middle(constraints),</span><br><span class="line">        child: child,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 后面的卡片，使用 Align 定位</span></span><br><span class="line">  Widget _backCard(BoxConstraints constraints) &#123;</span><br><span class="line">    <span class="comment">// 判断动画是否在运行</span></span><br><span class="line">    <span class="built_in">bool</span> forward = _cardChangeController.status == AnimationStatus.forward;</span><br><span class="line">    Widget child = Container(color: Colors.green);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在动画运行时使用动画值</span></span><br><span class="line">    <span class="keyword">if</span> (forward) &#123;</span><br><span class="line">      <span class="keyword">return</span> Align(</span><br><span class="line">        alignment: CardAnimations.backCardAlignmentAnimation(</span><br><span class="line">          _cardChangeController,</span><br><span class="line">        ).value,</span><br><span class="line">        child: SizedBox.fromSize(</span><br><span class="line">          size: CardAnimations.backCardSizeAnimation(</span><br><span class="line">            _cardChangeController,</span><br><span class="line">            constraints,</span><br><span class="line">          ).value,</span><br><span class="line">          child: child,</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 否则使用默认值</span></span><br><span class="line">    <span class="keyword">return</span> Align(</span><br><span class="line">      alignment: CardAlignments.back,</span><br><span class="line">      child: SizedBox.fromSize(</span><br><span class="line">        size: CardSizes.back(constraints),</span><br><span class="line">        child: child,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 改变位置的动画</span></span><br><span class="line">  <span class="keyword">void</span> _runChangeOrderAnimation() &#123;</span><br><span class="line">    _cardChangeController.reset();</span><br><span class="line">    _cardChangeController.forward();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 省略...</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="comment">// 省略...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化卡片换位动画控制器</span></span><br><span class="line">    _cardChangeController = AnimationController(</span><br><span class="line">      duration: <span class="built_in">Duration</span>(milliseconds: <span class="number">1000</span>),</span><br><span class="line">      vsync: <span class="keyword">this</span>,</span><br><span class="line">    )</span><br><span class="line">      ..addListener(() =&gt; setState(() &#123;&#125;))</span><br><span class="line">      ..addStatusListener((status) &#123;</span><br><span class="line">        <span class="keyword">if</span> (status == AnimationStatus.completed) &#123;</span><br><span class="line">          <span class="comment">// 动画运行结束后重置位置和旋转</span></span><br><span class="line">          _frontCardRotation = <span class="number">0.0</span>;</span><br><span class="line">          _frontCardAlignment = CardAlignments.front;</span><br><span class="line">          setState(() &#123;&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 省略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="./images/flutter-tinder-card/foward.gif" width="260" style="width:280px"><h2 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a>数据更新</h2><p>可以看到动画运行之后三张卡片都恢复了默认的位置和尺寸，而需要的效果是当卡片换位动画完成后三张卡片的数据会改变，所以还需要在动画之后进行数据处理。</p><p>创建一个数组保存全部子项目，使用一个索引更新最前面卡片的子项索引，在卡片换位动画结束后索引值加一。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; images = [</span><br><span class="line">  <span class="string">'https://gank.io/images/5ba77f3415b44f6c843af5e149443f94'</span>,</span><br><span class="line">  <span class="string">'https://gank.io/images/02eb8ca3297f4931ab64b7ebd7b5b89c'</span>,</span><br><span class="line">  <span class="string">'https://gank.io/images/31f92f7845f34f05bc10779a468c3c13'</span>,</span><br><span class="line">  <span class="string">'https://gank.io/images/b0f73f9527694f44b523ff059d8a8841'</span>,</span><br><span class="line">  <span class="string">'https://gank.io/images/1af9d69bc60242d7aa2e53125a4586ad'</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成卡片数组</span></span><br><span class="line"><span class="built_in">List</span>&lt;Widget&gt; cards = <span class="built_in">List</span>.generate(</span><br><span class="line">  images.length,</span><br><span class="line">  (<span class="built_in">int</span> index) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      decoration: BoxDecoration(</span><br><span class="line">        color: Colors.white,</span><br><span class="line">        borderRadius: BorderRadius.circular(<span class="number">16.0</span>),</span><br><span class="line">        boxShadow: [</span><br><span class="line">          BoxShadow(</span><br><span class="line">            offset: Offset(<span class="number">0</span>, <span class="number">17</span>),</span><br><span class="line">            blurRadius: <span class="number">23.0</span>,</span><br><span class="line">            spreadRadius: <span class="number">-13.0</span>,</span><br><span class="line">            color: Colors.black54,</span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">      child: ClipRRect(</span><br><span class="line">        borderRadius: BorderRadius.circular(<span class="number">16.0</span>),</span><br><span class="line">        child: Image.network(</span><br><span class="line">          images[index],</span><br><span class="line">          fit: BoxFit.cover,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="comment">// 使用生成的卡片数组</span></span><br><span class="line">  runApp(MyApp(cards: cards));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;Widget&gt; cards;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> MyApp(&#123;<span class="meta">@required</span> <span class="keyword">this</span>.cards&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _MyAppState createState() =&gt; _MyAppState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyApp</span>&gt; <span class="title">with</span> <span class="title">TickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 卡片列表</span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;Widget&gt; _cards = [];</span><br><span class="line">  <span class="comment">// 最前面卡片的索引</span></span><br><span class="line">  <span class="built_in">int</span> _frontCardIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 省略...</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  前面的卡片，使用 Align 定位</span></span><br><span class="line">  Widget _frontCard(BoxConstraints constraints) &#123;</span><br><span class="line">    <span class="comment">// 判断是否还有卡片</span></span><br><span class="line">    Widget card =</span><br><span class="line">        _frontCardIndex &lt; _cards.length ? _cards[_frontCardIndex] : Container();</span><br><span class="line">    <span class="built_in">bool</span> forward = _cardChangeController.status == AnimationStatus.forward;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 Transform.rotate 旋转卡片</span></span><br><span class="line">    Widget rotate = Transform.rotate(</span><br><span class="line">      angle: (pi / <span class="number">180.0</span>) * _frontCardRotation,</span><br><span class="line">      <span class="comment">// 使用 SizedBox 确定卡片尺寸</span></span><br><span class="line">      child: SizedBox.fromSize(</span><br><span class="line">        size: CardSizes.front(constraints),</span><br><span class="line">        <span class="comment">// 使用数组中的子项</span></span><br><span class="line">        child: card,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 省略...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 中间的卡片，使用 Align 定位</span></span><br><span class="line">  Widget _middleCard(BoxConstraints constraints) &#123;</span><br><span class="line">    <span class="comment">// 判断是否还有两张卡片</span></span><br><span class="line">    Widget card = _frontCardIndex &lt; _cards.length - <span class="number">1</span></span><br><span class="line">        ? _cards[_frontCardIndex + <span class="number">1</span>]</span><br><span class="line">        : Container();</span><br><span class="line">    <span class="comment">// 省略...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 后面的卡片，使用 Align 定位</span></span><br><span class="line">  Widget _backCard(BoxConstraints constraints) &#123;</span><br><span class="line">    <span class="comment">// 判断数组中是否还有三张卡片</span></span><br><span class="line">    Widget card = _frontCardIndex &lt; _cards.length - <span class="number">2</span></span><br><span class="line">        ? _cards[_frontCardIndex + <span class="number">2</span>]</span><br><span class="line">        : Container();</span><br><span class="line">    <span class="comment">// 省略...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 省略...</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="comment">// 初始化卡片数组</span></span><br><span class="line">    _cards.addAll(widget.cards);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化卡片换位动画控制器</span></span><br><span class="line">    _cardChangeController = AnimationController(</span><br><span class="line">      duration: <span class="built_in">Duration</span>(milliseconds: <span class="number">1000</span>),</span><br><span class="line">      vsync: <span class="keyword">this</span>,</span><br><span class="line">    )</span><br><span class="line">      ..addListener(() =&gt; setState(() &#123;&#125;))</span><br><span class="line">      ..addStatusListener((status) &#123;</span><br><span class="line">        <span class="keyword">if</span> (status == AnimationStatus.completed) &#123;</span><br><span class="line">          <span class="comment">// 动画结束后将最前面卡片的索引向前移动一位</span></span><br><span class="line">          _frontCardIndex++;</span><br><span class="line">          <span class="comment">// 动画运行结束后重置位置和旋转</span></span><br><span class="line">          _frontCardRotation = <span class="number">0.0</span>;</span><br><span class="line">          _frontCardAlignment = CardAlignments.front;</span><br><span class="line">          setState(() &#123;&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 省略...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Stack(</span><br><span class="line">  children: [</span><br><span class="line">    <span class="comment">// 省略...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用一个占满父元素的 GestureDetector 监听手指移动</span></span><br><span class="line">    <span class="comment">// 如果动画在运行中就不在响应手势</span></span><br><span class="line">    _cardChangeController.status != AnimationStatus.forward</span><br><span class="line">        ? SizedBox.expand(</span><br><span class="line">            child: GestureDetector(</span><br><span class="line">              <span class="comment">// 省略...</span></span><br><span class="line">            )</span><br><span class="line">          )</span><br><span class="line">        : IgnorePointer(),</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此整个布局就实现了 🎉</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个布局的关键点在于</p><ol><li>三张卡片的定位</li><li>监听手势更新最前面卡片的位置</li><li>卡片的换位动画和回弹动画</li></ol><p>作者已经封装了这个插件，地址是 <a href="https://pub.dev/packages/tcard" target="_blank" rel="noopener">https://pub.dev/packages/tcard</a> 欢迎使用。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://api.flutter.dev/flutter/widgets/Stack-class.html" target="_blank" rel="noopener">Stack class</a></p><p><a href="https://github.com/Ivaskuu/tinder_cards" target="_blank" rel="noopener">tinder_cards</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;./images/flutter-tinder-card/cover.png&quot; alt=&quot;cards&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Flutter" scheme="https://coldstone.fun/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>最好的你</title>
    <link href="https://coldstone.fun/post/2020/06/17/leetcode-1014/"/>
    <id>https://coldstone.fun/post/2020/06/17/leetcode-1014/</id>
    <published>2020-06-17T06:19:00.000Z</published>
    <updated>2020-12-07T01:51:26.703Z</updated>
    
    <content type="html"><![CDATA[<p><img src="./images/best_of_you.png" alt="best_of_you"></p><a id="more"></a><p><a href="https://leetcode-cn.com/problems/best-sightseeing-pair/" target="_blank" rel="noopener">LeetCode 1014. 最佳观光组合</a></p><img src="./images/best_of_you.png" width="1106" style="width:553px" alt="best_of_you">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;./images/best_of_you.png&quot; alt=&quot;best_of_you&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="代码写诗" scheme="https://coldstone.fun/categories/%E4%BB%A3%E7%A0%81%E5%86%99%E8%AF%97/"/>
    
    
      <category term="leetcode" scheme="https://coldstone.fun/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 绘制图表（二）饼状图🍪</title>
    <link href="https://coldstone.fun/post/2020/06/09/flutter-pie-chart/"/>
    <id>https://coldstone.fun/post/2020/06/09/flutter-pie-chart/</id>
    <published>2020-06-09T06:08:00.000Z</published>
    <updated>2020-12-07T01:51:26.703Z</updated>
    
    <content type="html"><![CDATA[<p><img src="./images/flutter-pie-chart/cover.png" alt="pie"></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>接上文，本文讲解如何使用 Flutter 绘制饼状图，最终效果如图</p><img src="./images/flutter-pie-chart/pie.gif" width="524" style="width:260px"><p><a href="https://dartpad.dartlang.org/b8a2b88647fa75df5d31445a93cb390f" target="_blank" rel="noopener">在线查看</a></p><h2 id="定义-PieChart-amp-PiePart"><a href="#定义-PieChart-amp-PiePart" class="headerlink" title="定义 PieChart &amp; PiePart"></a>定义 PieChart &amp; PiePart</h2><p>第一步定义 <code>PieChart</code> 和 <code>PiePart</code> 类。<code>PieChart</code> 是整个饼状图控件，有 <code>datas</code> 和 <code>legends</code> 两个属性，表示饼图的数据和每部分的标识。<br><code>PiePart</code> 表示饼图的一部分，有 <code>color</code>, <code>startAngle</code>, <code>sweepAngle</code> 三个属性，分别表示颜色，起始弧度值，占据圆形的弧度值。<code>PeiChartPainter</code> 类实现了具体的绘制方法。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PiePart</span> </span>&#123;</span><br><span class="line">  <span class="built_in">double</span> sweepAngle;</span><br><span class="line">  <span class="keyword">final</span> Color color;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> startAngle;</span><br><span class="line"></span><br><span class="line">  PiePart(</span><br><span class="line">    <span class="keyword">this</span>.startAngle,</span><br><span class="line">    <span class="keyword">this</span>.sweepAngle,</span><br><span class="line">    <span class="keyword">this</span>.color,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PieChart</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">double</span>&gt; datas;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; legends;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> PieChart(&#123;</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.datas,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.legends,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _PieChartState createState() =&gt; _PieChartState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_PieChartState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">PieChart</span>&gt; <span class="title">with</span> <span class="title">TickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  <span class="built_in">double</span> _total = <span class="number">0.0</span>;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;PiePart&gt; _parts = &lt;PiePart&gt;[];</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">      children: [</span><br><span class="line">        Container(</span><br><span class="line">          width: <span class="number">300</span>,</span><br><span class="line">          height: <span class="number">300</span>,</span><br><span class="line">          child: CustomPaint(</span><br><span class="line">            painter: PeiChartPainter(</span><br><span class="line">              total: _total,</span><br><span class="line">              parts: _parts,</span><br><span class="line">              datas: widget.datas,</span><br><span class="line">              legends: widget.legends</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PeiChartPainter</span> <span class="keyword">extends</span> <span class="title">CustomPainter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> total;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">double</span>&gt; datas;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;PiePart&gt; parts;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; legends;</span><br><span class="line"></span><br><span class="line">  PeiChartPainter(&#123;</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.total,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.datas,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.parts,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.legends,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> shouldRepaint(PeiChartPainter oldDelegate) =&gt; <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="绘制圆框"><a href="#绘制圆框" class="headerlink" title="绘制圆框"></a>绘制圆框</h2><p>先绘制图表的圆框，在 <code>PeiChartPainter</code> 上添加 <code>drawCircle</code> 方法，以圆的中心点和圆的半径绘制一个空心圆形。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> drawCircle(Canvas canvas, Size size) &#123;</span><br><span class="line">  <span class="keyword">final</span> sw = size.width;</span><br><span class="line">  <span class="keyword">final</span> sh = size.height;</span><br><span class="line">  <span class="comment">// 确定圆的半径</span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> radius = math.min(sw, sh) / <span class="number">2</span>;</span><br><span class="line">  <span class="comment">// 定义中心点</span></span><br><span class="line">  <span class="keyword">final</span> Offset center = Offset(sw / <span class="number">2</span>, sh / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义圆形的绘制属性</span></span><br><span class="line">  <span class="keyword">final</span> paint = Paint()</span><br><span class="line">    ..style = PaintingStyle.stroke</span><br><span class="line">    ..color = Colors.grey</span><br><span class="line">    ..strokeWidth = <span class="number">1.0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用 Canvas 的 drawCircle 绘制</span></span><br><span class="line">  canvas.drawCircle(center, radius, paint);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">  drawCircle(canvas, size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="./images/flutter-pie-chart/circle.png" width="520" style="width:260px"><h2 id="绘制标识"><a href="#绘制标识" class="headerlink" title="绘制标识"></a>绘制标识</h2><p>这一步需要先在 <code>_PieChartState</code> 里面进行数据的初始化，然后绘制每个数据对应的标识，分以下几步进行</p><ol><li>计算出每个数据占总和的占比</li><li>根据占比计算数据占据圆的弧度值</li><li>根据之前数据占据圆形的弧度值计算出下一个数据的起始弧度值</li><li>根据计算出的起始弧度值和占据弧度值创建 <code>PiePart</code> 对象</li><li>使用 <code>PiePart</code> 对象绘制标识</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_PieChartState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">PieChart</span>&gt; <span class="title">with</span> <span class="title">TickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  <span class="built_in">double</span> _total = <span class="number">0.0</span>;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;PiePart&gt; _parts = &lt;PiePart&gt;[];</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">double</span>&gt; datas = widget.datas;</span><br><span class="line">    <span class="comment">// 计算出数据总和</span></span><br><span class="line">    _total = datas.reduce((a, b) =&gt; a + b);</span><br><span class="line">    <span class="comment">// 定义一个起始变量</span></span><br><span class="line">    <span class="built_in">double</span> startAngle = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; datas.length; i++) &#123;</span><br><span class="line">      <span class="keyword">final</span> data = datas[i];</span><br><span class="line">      <span class="comment">// 计算出每个数据所占的弧度值</span></span><br><span class="line">      <span class="keyword">final</span> angle = (data / _total) * -math.pi * <span class="number">2</span>;</span><br><span class="line">      PiePart peiPart;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 下一个数据的起始弧度值等于之前的数据弧度值之和</span></span><br><span class="line">        <span class="built_in">double</span> lastSweepAngle = _parts[i - <span class="number">1</span>].sweepAngle;</span><br><span class="line">        startAngle += lastSweepAngle;</span><br><span class="line">        peiPart = PiePart(startAngle, angle, colors[i]);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 第一个数据的起始弧度为 0.0</span></span><br><span class="line">        peiPart = PiePart(<span class="number">0.0</span>, angle, colors[i]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 添加到数组中</span></span><br><span class="line">      _parts.add(peiPart);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">      children: [</span><br><span class="line">        Container(</span><br><span class="line">          width: <span class="number">300</span>,</span><br><span class="line">          height: <span class="number">300</span>,</span><br><span class="line">          child: CustomPaint(</span><br><span class="line">            <span class="comment">// 将数据传给 PeiChartPainter</span></span><br><span class="line">            painter: PeiChartPainter(</span><br><span class="line">              total: _total,</span><br><span class="line">              parts: _parts,</span><br><span class="line">              datas: widget.datas,</span><br><span class="line">              legends: widget.legends,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 PeiChartPainter 上添加 <code>drawLegends</code> 方法，在圆框的外围绘制每部分对应的标识。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> drawLegends(Canvas canvas, Size size) &#123;</span><br><span class="line">  <span class="keyword">final</span> sw = size.width;</span><br><span class="line">  <span class="keyword">final</span> sh = size.height;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> radius = math.min(sw, sh) / <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> fontSize = <span class="number">12.0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; datas.length; i++) &#123;</span><br><span class="line">    <span class="keyword">final</span> PiePart <span class="keyword">part</span> = parts[i];</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">String</span> legend = legends[i];</span><br><span class="line">    <span class="comment">// 根据每部分的起始弧度加上自身弧度值的一半得到每部分的中间弧度值</span></span><br><span class="line">    <span class="keyword">final</span> radians = <span class="keyword">part</span>.startAngle + <span class="keyword">part</span>.sweepAngle / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 根据三角函数计算中出标识文字的 x 和 y 位置，需要加上宽和高的一半适配 Canvas 的坐标</span></span><br><span class="line">    <span class="built_in">double</span> x = math.cos(radians) * (radius + <span class="number">32</span>) + sw / <span class="number">2</span> - fontSize;</span><br><span class="line">    <span class="built_in">double</span> y = math.sin(radians) * (radius + <span class="number">32</span>) + sh / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">final</span> offset = Offset(x, y);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 TextPainter 绘制文字标识</span></span><br><span class="line">    TextPainter(</span><br><span class="line">      textAlign: TextAlign.center,</span><br><span class="line">      text: TextSpan(</span><br><span class="line">        text: legend,</span><br><span class="line">        style: TextStyle(</span><br><span class="line">          fontSize: fontSize,</span><br><span class="line">          color: Colors.black,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      textDirection: TextDirection.ltr,</span><br><span class="line">    )</span><br><span class="line">      ..layout(</span><br><span class="line">        minWidth: <span class="number">0</span>,</span><br><span class="line">        maxWidth: size.width,</span><br><span class="line">      )</span><br><span class="line">      ..paint(canvas, offset);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">  drawCircle(canvas, size);</span><br><span class="line">  drawLegends(canvas, size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="./images/flutter-pie-chart/legend.png" width="520" style="width:260px"><p>计算文字位置用到的的三角函数是</p><p><img src="./images/flutter-pie-chart/angle.png" alt="angle"></p><h2 id="绘制数据对应的弧形"><a href="#绘制数据对应的弧形" class="headerlink" title="绘制数据对应的弧形"></a>绘制数据对应的弧形</h2><p>在 <code>PeiChartPainter</code> 上添加 <code>drawParts</code> 方法，绘制每个数据对应的弧形。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> drawParts(Canvas canvas, Size size) &#123;</span><br><span class="line">  <span class="keyword">final</span> sw = size.width;</span><br><span class="line">  <span class="keyword">final</span> sh = size.height;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> fontSize = <span class="number">10.0</span>;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> radius = math.min(sw, sh) / <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">final</span> Offset center = Offset(sw / <span class="number">2</span>, sh / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建弧形依照的矩形</span></span><br><span class="line">  <span class="keyword">final</span> rect = Rect.fromCenter(</span><br><span class="line">    center: center,</span><br><span class="line">    width: radius * <span class="number">2</span>,</span><br><span class="line">    height: radius * <span class="number">2</span>,</span><br><span class="line">  );</span><br><span class="line">  <span class="comment">// 设置绘制属性</span></span><br><span class="line">  <span class="keyword">final</span> paint = Paint()</span><br><span class="line">    ..strokeWidth = <span class="number">0.0</span></span><br><span class="line">    ..isAntiAlias = <span class="keyword">true</span></span><br><span class="line">    ..style = PaintingStyle.fill;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; parts.length; i++) &#123;</span><br><span class="line">    <span class="keyword">final</span> PiePart <span class="keyword">part</span> = parts[i];</span><br><span class="line">    <span class="comment">// 设置每部分的颜色</span></span><br><span class="line">    paint.color = <span class="keyword">part</span>.color;</span><br><span class="line">    <span class="comment">// 使用 drawArc 方法画出弧形，参数依次是依照的矩形，起始弧度值，占据的弧度值，是否从中心点绘制，绘制属性</span></span><br><span class="line">    canvas.drawArc(rect, <span class="keyword">part</span>.startAngle, <span class="keyword">part</span>.sweepAngle, <span class="keyword">true</span>, paint);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">double</span> data = datas[i];</span><br><span class="line">    <span class="comment">// 计算每部分占比</span></span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">String</span> percent = (data / total * <span class="number">100</span>).toStringAsFixed(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">double</span> radians = <span class="keyword">part</span>.startAngle + <span class="keyword">part</span>.sweepAngle / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 使用三角函数计算文字位置</span></span><br><span class="line">    <span class="built_in">double</span> x = math.cos(radians) * radius / <span class="number">2</span> + sw / <span class="number">2</span> - fontSize * <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">double</span> y = math.sin(radians) * radius / <span class="number">2</span> + sh / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">final</span> Offset offset = Offset(x, y);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 TextPainter 绘制文字标识</span></span><br><span class="line">    TextPainter(</span><br><span class="line">      textAlign: TextAlign.start,</span><br><span class="line">      text: TextSpan(</span><br><span class="line">        text: <span class="string">'<span class="subst">$data</span> <span class="subst">$percent</span>%'</span>,</span><br><span class="line">        style: TextStyle(</span><br><span class="line">          fontSize: fontSize,</span><br><span class="line">          color: Colors.white,</span><br><span class="line">          fontWeight: FontWeight.bold,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      textDirection: TextDirection.ltr,</span><br><span class="line">    )</span><br><span class="line">      ..layout(</span><br><span class="line">        minWidth: <span class="number">0</span>,</span><br><span class="line">        maxWidth: size.width,</span><br><span class="line">      )</span><br><span class="line">      ..paint(canvas, offset);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">  drawCircle(canvas, size);</span><br><span class="line">  drawLegends(canvas, size);</span><br><span class="line">  drawParts(canvas, size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="./images/flutter-pie-chart/part.png" width="520" style="width:260px"><h2 id="添加动画"><a href="#添加动画" class="headerlink" title="添加动画"></a>添加动画</h2><p>最后给饼图添加一个数据不断增长的动画效果，在 <code>_PieChartState</code> 添加动画的控制器 <code>_controller</code> 和保存动画数据的 <code>_animateDatas</code> 数组。在 <code>initState</code> 中初始化动画控制器和填充 <code>_animateDatas</code> 数组。然后创建两个 <code>double</code> 类型的补间动画，将动画值传给 <code>PeiChartPainter</code> 使用即可。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_PieChartState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">PieChart</span>&gt; <span class="title">with</span> <span class="title">TickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  <span class="built_in">double</span> _total = <span class="number">0.0</span>;</span><br><span class="line">  AnimationController _controller;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">double</span>&gt; _animateDatas = [];</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;PiePart&gt; _parts = &lt;PiePart&gt;[];</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="comment">// 初始化动画控制器</span></span><br><span class="line">    _controller = AnimationController(</span><br><span class="line">      duration: <span class="built_in">Duration</span>(milliseconds: <span class="number">3000</span>),</span><br><span class="line">      vsync: <span class="keyword">this</span>,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">double</span>&gt; datas = widget.datas;</span><br><span class="line">    <span class="comment">// 计算出数据总和</span></span><br><span class="line">    _total = datas.reduce((a, b) =&gt; a + b);</span><br><span class="line">    <span class="comment">// 设置一个起始变量</span></span><br><span class="line">    <span class="built_in">double</span> startAngle = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; datas.length; i++) &#123;</span><br><span class="line">      <span class="comment">// 填充动画数组</span></span><br><span class="line">      _animateDatas.add(<span class="number">0.0</span>);</span><br><span class="line">      <span class="keyword">final</span> data = datas[i];</span><br><span class="line">      <span class="comment">// 计算出每个数据所占的弧度值</span></span><br><span class="line">      <span class="keyword">final</span> angle = (data / _total) * -math.pi * <span class="number">2</span>;</span><br><span class="line">      PiePart peiPart;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 下一个数据的起始弧度值等于之前的弧度值相加</span></span><br><span class="line">        <span class="built_in">double</span> lastSweepAngle = _parts[i - <span class="number">1</span>].sweepAngle;</span><br><span class="line">        startAngle += lastSweepAngle;</span><br><span class="line">        peiPart = PiePart(startAngle, angle, colors[i]);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 第一个数据的起始弧度为 0.0</span></span><br><span class="line">        peiPart = PiePart(<span class="number">0.0</span>, angle, colors[i]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 添加到数组中</span></span><br><span class="line">      _parts.add(peiPart);</span><br><span class="line"></span><br><span class="line">      CurvedAnimation curvedAnimation = CurvedAnimation(</span><br><span class="line">        parent: _controller,</span><br><span class="line">        curve: Curves.ease,</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 创建弧形的补间动画</span></span><br><span class="line">      <span class="keyword">final</span> partTween = Tween&lt;<span class="built_in">double</span>&gt;(begin: <span class="number">0.0</span>, end: peiPart.sweepAngle);</span><br><span class="line">      Animation&lt;<span class="built_in">double</span>&gt; animation = partTween.animate(curvedAnimation);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 创建文字的补间动画</span></span><br><span class="line">      <span class="keyword">final</span> percentTween = Tween&lt;<span class="built_in">double</span>&gt;(begin: <span class="number">0.0</span>, end: data);</span><br><span class="line">      Animation&lt;<span class="built_in">double</span>&gt; percentAnimation =</span><br><span class="line">          percentTween.animate(curvedAnimation);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 在动画启动后不断改变数据值</span></span><br><span class="line">      _controller.addListener(() &#123;</span><br><span class="line">        _parts[i].sweepAngle = animation.value;</span><br><span class="line">        _animateDatas[i] =</span><br><span class="line">            <span class="built_in">double</span>.parse(percentAnimation.value.toStringAsFixed(<span class="number">1</span>));</span><br><span class="line">        setState(() &#123;&#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// 开始动画</span></span><br><span class="line">      _controller.forward();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">      children: [</span><br><span class="line">        Container(</span><br><span class="line">          width: <span class="number">300</span>,</span><br><span class="line">          height: <span class="number">300</span>,</span><br><span class="line">          child: CustomPaint(</span><br><span class="line">            <span class="comment">// 将数据传给 PeiChartPainter</span></span><br><span class="line">            painter: PeiChartPainter(</span><br><span class="line">              total: _total,</span><br><span class="line">              parts: _parts,</span><br><span class="line">              datas: _animateDatas,</span><br><span class="line">              legends: widget.legends,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        SizedBox(height: <span class="number">80</span>),</span><br><span class="line">        Container(</span><br><span class="line">          decoration: BoxDecoration(</span><br><span class="line">            color: Colors.blue,</span><br><span class="line">            shape: BoxShape.circle,</span><br><span class="line">          ),</span><br><span class="line">          child: IconButton(</span><br><span class="line">            color: Colors.white,</span><br><span class="line">            icon: Icon(Icons.refresh),</span><br><span class="line">            onPressed: () &#123;</span><br><span class="line">              _controller.reset();</span><br><span class="line">              _controller.forward();</span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此整个饼状图的绘制就完成了，传入数据即可使用 🎉🎉🎉</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PieChart(</span><br><span class="line">  datas: [<span class="number">60.0</span>, <span class="number">50.0</span>, <span class="number">40.0</span>, <span class="number">30.0</span>, <span class="number">90.0</span>],</span><br><span class="line">  legends: [<span class="string">'一月'</span>, <span class="string">'二月'</span>, <span class="string">'三月'</span>, <span class="string">'四月'</span>, <span class="string">'五月'</span>],</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>完整代码地址：<a href="https://github.com/xrr2016/flutter-charts/blob/master/lib/charts/pie_chart.dart" target="_blank" rel="noopener">pie_chart.dart</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文说明了如何使用 Flutter 绘制一个饼状图，使用了一点三角函数，关键点在于计算出每个数据占据整个圆形的弧度值，以及数据的起始弧度值。<br>数值增长的动画效果使用一个 <code>AnimationController</code> 在开始动画后不断的更新绘制使用的数据，在将数据传递给 <code>PeiChartPainter</code> 使用即可实现。</p><h2 id="附言"><a href="#附言" class="headerlink" title="附言"></a>附言</h2><p>准备写一系列关于用 Flutter 画图表的文章，用来分享这方面的知识，这篇文章是这个系列的第二篇，预计 6 篇。</p><ol><li><a href="https://coldstone.fun/post/2020/05/31/flutter-bar-chart/">Flutter 绘制图表（一）柱状图📊</a></li><li><a href="https://coldstone.fun/post/2020/06/09/flutter-pie-chart/">Flutter 绘制图表（二）饼状图🍪</a>（本文）</li><li>Flutter 绘制图表（三）折线图📈</li><li>Flutter 绘制图表（四）雷达图🎯</li><li>Flutter 绘制图表（五）环状图🍩</li><li>Flutter 绘制图表（六）条形图📏</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;./images/flutter-pie-chart/cover.png&quot; alt=&quot;pie&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Flutter" scheme="https://coldstone.fun/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 绘制图表（一）柱状图📊</title>
    <link href="https://coldstone.fun/post/2020/05/31/flutter-bar-chart/"/>
    <id>https://coldstone.fun/post/2020/05/31/flutter-bar-chart/</id>
    <published>2020-05-31T14:00:00.000Z</published>
    <updated>2020-12-07T01:51:26.699Z</updated>
    
    <content type="html"><![CDATA[<p><img src="./images/flutter-bar-chart/cover.png" alt="bar"></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文讲解如何使用 <a href="https://flutter.dev/" target="_blank" rel="noopener">Flutter</a> （Google 开源的 UI 工具包，帮助开发者通过一套代码库高效构建多平台精美应用，支持移动、Web、桌面和嵌入式平台） 绘制一个带有动画效果的柱状图表，最终效果如下图。</p><img src="./images/flutter-bar-chart/bar-chart.gif" width="568" style="width:260px"><p>要绘制这样的图表普通的 Widget 难以实现，这时就需要 <code>CustomPaint</code> 和 <code>CustomPainter</code> 出场了，它们类似于 Web 里面的 <code>&lt;canvas&gt;</code> 元素，<code>CustomPaint</code> 提供了一个绘制区域，而 <code>CustomPainter</code> 拥有具体的绘制方法。</p><h2 id="CustomPaint-是什么"><a href="#CustomPaint-是什么" class="headerlink" title="CustomPaint 是什么"></a>CustomPaint 是什么</h2><p><code>CustomPaint</code> 是用来提供画布的控件，它使用传入画笔 <code>painter</code> 在 <code>child</code> 控件后面绘制图形, ，<code>foregroundPainter</code> 画笔绘制在 <code>child</code> 控件之前。<code>size</code> 属性控制画布的大小，假如定义了子控件 <code>child</code>，那么画布的大小将由子控件的大小决定，<code>size</code> 属性被忽略。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomPaint</span> <span class="keyword">extends</span> <span class="title">SingleChildRenderObjectWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> CustomPaint(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    <span class="keyword">this</span>.painter,</span><br><span class="line">    <span class="keyword">this</span>.foregroundPainter,</span><br><span class="line">    <span class="keyword">this</span>.size = Size.zero,</span><br><span class="line">    <span class="keyword">this</span>.isComplex = <span class="keyword">false</span>,</span><br><span class="line">    <span class="keyword">this</span>.willChange = <span class="keyword">false</span>,</span><br><span class="line">    Widget child,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而 <code>CustomPainter</code> 是实现绘制图形的控件，要在画布上绘制图形需要实现它的 <code>paint</code> 方法。<code>paint</code> 方法有两个参数，<code>Canvas canvas</code> 和 <code>Size size</code>。<code>Size</code> 对象表示画布的尺寸，<code>Canvas</code> 对象上是具体的绘制图形的方法。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomPainter</span> <span class="keyword">extends</span> <span class="title">Listenable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> paint(Canvas canvas, Size size);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> shouldRepaint(<span class="keyword">covariant</span> CustomPainter oldDelegate);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Canvas canvas</code> 对象主要的绘制图形方法有</p><table><thead><tr><th align="left">方法名</th><th align="left">参数</th><th align="left">效果</th></tr></thead><tbody><tr><td align="left"><code>drawColor</code></td><td align="left"><code>Color color</code>, <code>BlendMode blendMode</code></td><td align="left">绘制颜色到画布上</td></tr><tr><td align="left"><code>drawLine</code></td><td align="left"><code>Offset p1</code>, <code>Offset p2</code>, <code>Paint paint</code></td><td align="left">两点之间画线</td></tr><tr><td align="left"><code>drawPaint</code></td><td align="left"><code>Paint paint</code></td><td align="left">使用 [Paint] 填充画布</td></tr><tr><td align="left"><code>drawRect</code></td><td align="left"><code>Rect rect</code>, <code>Paint paint</code></td><td align="left">绘制矩形</td></tr><tr><td align="left"><code>drawRRect</code></td><td align="left"><code>RRect rrect</code>, <code>Paint paint</code></td><td align="left">绘制带圆角的矩形</td></tr><tr><td align="left"><code>drawOval</code></td><td align="left"><code>Rect rect</code>, <code>Paint paint</code></td><td align="left">绘制椭圆</td></tr><tr><td align="left"><code>drawCircle</code></td><td align="left"><code>Offset c</code>, <code>double radius</code>, <code>Paint paint</code></td><td align="left">绘制圆形</td></tr><tr><td align="left"><code>drawArc</code></td><td align="left"><code>Rect rect</code>, <code>double startAngle</code>, <code>double sweepAngle</code>, <code>bool useCenter</code>, <code>Paint paint</code></td><td align="left">绘制弧形</td></tr><tr><td align="left"><code>drawPath</code></td><td align="left"><code>Path path</code>, <code>Paint paint</code></td><td align="left">绘制路径</td></tr><tr><td align="left"><code>drawImage</code></td><td align="left"><code>Image image</code>, <code>Offset p</code>, <code>Paint paint</code></td><td align="left">绘制图像</td></tr><tr><td align="left"><code>drawPoints</code></td><td align="left"><code>PointMode pointMode</code>, <code>List&lt;Offset&gt; points</code>, <code>Paint paint</code></td><td align="left">绘制多个点</td></tr></tbody></table><p>要将图形绘制到画布上需要先创建一个继承至 <code>CustomPainter</code> 的自定义画笔，例如绘制一个矩形需要实现一个绘制矩形的画笔 <code>RectanglePainter</code>，然后在画布 <code>CustomPaint</code> 上应用它。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RectanglePainter</span> <span class="keyword">extends</span> <span class="title">CustomPainter</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">    <span class="comment">// 定义一个矩形</span></span><br><span class="line">    <span class="keyword">final</span> Rect rect = Rect.fromLTWH(<span class="number">50.0</span>, <span class="number">50.0</span>, <span class="number">100.0</span>, <span class="number">100.0</span>);</span><br><span class="line">    <span class="comment">// 指定绘制的样式</span></span><br><span class="line">    <span class="keyword">final</span> Paint paint = Paint()</span><br><span class="line">      ..color = Colors.orange</span><br><span class="line">      ..strokeWidth = <span class="number">4.0</span></span><br><span class="line">      ..style = PaintingStyle.stroke</span><br><span class="line">      ..isAntiAlias = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 drawRect 绘制矩形</span></span><br><span class="line">    canvas.drawRect(rect, paint);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> shouldRepaint(RectanglePainter oldDelegate) =&gt; <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: CustomPaint(</span><br><span class="line">        <span class="comment">// 使用 RectanglePainter 在画布上绘制</span></span><br><span class="line">        painter: RectanglePainter(),</span><br><span class="line">        child: Container(</span><br><span class="line">          width: <span class="number">300</span>,</span><br><span class="line">          height: <span class="number">300</span>,</span><br><span class="line">          decoration: BoxDecoration(</span><br><span class="line">            border: Border.all(</span><br><span class="line">              width: <span class="number">1.0</span>,</span><br><span class="line">              color: Colors.grey[<span class="number">300</span>],</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如图</p><img src="./images/flutter-bar-chart/rect.png" width="520" style="width:260px"><h2 id="绘制柱状图表"><a href="#绘制柱状图表" class="headerlink" title="绘制柱状图表"></a>绘制柱状图表</h2><p>介绍完毕，下面开始绘制柱状图表，第一步创建 <code>BarChart</code> 控件代表柱状图，它有两个构造参数一个是 <code>data</code> 用来接收图表数据，以及 <code>xAxis</code> 表示图表横轴标识。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BarChart</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">double</span>&gt; data;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; xAxis;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> BarChart(&#123;</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.data,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.xAxis,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _BarChartState createState() =&gt; _BarChartState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_BarChartState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">BarChart</span>&gt; <span class="title">with</span> <span class="title">TickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">      children: [</span><br><span class="line">        CustomPaint(</span><br><span class="line">          painter: BarChartPainter(</span><br><span class="line">            datas: widget.data,</span><br><span class="line">            xAxis: widget.xAxis,</span><br><span class="line">          ),</span><br><span class="line">          child: Container(width: <span class="number">300</span>, height: <span class="number">300</span>),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后创建一个用来绘制的自定义画笔 <code>BarChartPainter</code>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BarChartPainter</span> <span class="keyword">extends</span> <span class="title">CustomPainter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">double</span>&gt; datas;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; xAxis;</span><br><span class="line"></span><br><span class="line">  BarChartPainter(&#123;</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.xAxis,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.datas,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">   <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> shouldRepaint(BarChartPainter oldDelegate) =&gt; <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> shouldRebuildSemantics(BarChartPainter oldDelegate) =&gt; <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="绘制坐标轴"><a href="#绘制坐标轴" class="headerlink" title="绘制坐标轴"></a>绘制坐标轴</h3><p>在 <code>BarChartPainter</code> 上定义一个 <code>_drawAxis</code> 方法用于绘制横坐标轴，使用一个由左上，左下，右下三个点控制的 <code>Path</code> 路径绘制。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _drawAxis(Canvas canvas, Size size) &#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> sw = size.width;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> sh = size.height;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用 Paint 定义路径的样式</span></span><br><span class="line">  <span class="keyword">final</span> Paint paint = Paint()</span><br><span class="line">    ..color = Colors.black87</span><br><span class="line">    ..style = PaintingStyle.stroke</span><br><span class="line">    ..strokeWidth = <span class="number">1.0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用 Path 定义绘制的路径，从画布的左上角到左下角在到右下角</span></span><br><span class="line">  <span class="keyword">final</span> Path path = Path()</span><br><span class="line">    ..moveTo(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    ..lineTo(<span class="number">0</span>, sh)</span><br><span class="line">    ..lineTo(sw, sh);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用 drawPath 方法绘制路径</span></span><br><span class="line">  canvas.drawPath(path, paint);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">  _drawAxis(canvas, size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下</p><img src="./images/flutter-bar-chart/chart-axis.png" width="508" style="width:260px" alt="chart-axis"><h3 id="绘制标识"><a href="#绘制标识" class="headerlink" title="绘制标识"></a>绘制标识</h3><p>在 <code>BarChartPainter</code> 上定义一个 <code>_drawLabels</code> 方法绘制纵轴标识。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _drawLabels(Canvas canvas, Size size) &#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> gap = <span class="number">50.0</span>;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> sh = size.height;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">double</span>&gt; yAxisLabels = [];</span><br><span class="line"></span><br><span class="line">  Paint paint = Paint()</span><br><span class="line">    ..color = Colors.black87</span><br><span class="line">    ..strokeWidth = <span class="number">2.0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用 50.0 为间隔绘制比传入数据多一个的标识</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= datas.length; i++) &#123;</span><br><span class="line">    yAxisLabels.add(gap * i);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  yAxisLabels.asMap().forEach(</span><br><span class="line">    (index, label) &#123;</span><br><span class="line">      <span class="comment">// 标识的高度为画布高度减去标识的值</span></span><br><span class="line">      <span class="keyword">final</span> <span class="built_in">double</span> top = sh - label;</span><br><span class="line">      <span class="keyword">final</span> rect = Rect.fromLTWH(<span class="number">0</span>, top, <span class="number">4</span>, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">final</span> Offset textOffset = Offset(</span><br><span class="line">        <span class="number">0</span> - labelFontSize * <span class="number">3</span>,</span><br><span class="line">        top - labelFontSize / <span class="number">2</span>,</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 绘制 Y 轴右边的线条</span></span><br><span class="line">      canvas.drawRect(rect, paint);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 绘制文字需要用 `TextPainter`，最后调用 paint 方法绘制文字</span></span><br><span class="line">      TextPainter(</span><br><span class="line">        text: TextSpan(</span><br><span class="line">          text: label.toStringAsFixed(<span class="number">0</span>),</span><br><span class="line">          style: TextStyle(fontSize: labelFontSize, color: Colors.black87),</span><br><span class="line">        ),</span><br><span class="line">        textAlign: TextAlign.right,</span><br><span class="line">        textDirection: TextDirection.ltr,</span><br><span class="line">        textWidthBasis: TextWidthBasis.longestLine,</span><br><span class="line">      )</span><br><span class="line">        ..layout(minWidth: <span class="number">0</span>, maxWidth: <span class="number">24</span>)</span><br><span class="line">        ..paint(canvas, textOffset);</span><br><span class="line">    &#125;,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">  _drawAxis(canvas, size);</span><br><span class="line">  _drawLabels(canvas, size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下</p><img src="./images/flutter-bar-chart/chart-yaxis.png" width="520" style="width:260px" alt="chart-yaxis"><h3 id="绘制数据矩形"><a href="#绘制数据矩形" class="headerlink" title="绘制数据矩形"></a>绘制数据矩形</h3><p>然后定义一个 <code>_darwBars</code> 方法将具体矩形和横轴标识绘制出来。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;Color&gt; colors = [</span><br><span class="line">  Color(<span class="number">0xff8e43e7</span>),</span><br><span class="line">  Color(<span class="number">0xffff4f81</span>),</span><br><span class="line">  Color(<span class="number">0xff1cc7d0</span>),</span><br><span class="line">  Color(<span class="number">0xff00aeff</span>),</span><br><span class="line">  Color(<span class="number">0xff3369e7</span>),</span><br><span class="line">  Color(<span class="number">0xffb84592</span>),</span><br><span class="line">  Color(<span class="number">0xff2dde98</span>),</span><br><span class="line">  Color(<span class="number">0xffff6c5f</span>),</span><br><span class="line">  Color(<span class="number">0xff003666</span>),</span><br><span class="line">  Color(<span class="number">0xffffc168</span>),</span><br><span class="line">  Color(<span class="number">0xff050f2c</span>),</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> _darwBars(Canvas canvas, Size size) &#123;</span><br><span class="line">  <span class="keyword">final</span> sh = size.height;</span><br><span class="line">  <span class="keyword">final</span> paint = Paint()..style = PaintingStyle.fill;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; datas.length; i++) &#123;</span><br><span class="line">    <span class="comment">// 每个矩形使用预设的 colors 数组里面的颜色</span></span><br><span class="line">    paint.color = colors[i];</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">double</span> textFontSize = <span class="number">14.0</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">double</span> data = datas[i];</span><br><span class="line">    <span class="comment">// 矩形的上边缘为画布高度减去数据值</span></span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">double</span> top = sh - data;</span><br><span class="line">    <span class="comment">// 矩形的左边缘为当前索引值乘以矩形宽度加上矩形之间的间距</span></span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">double</span> left = i * _barWidth + (i * _barGap) + _barGap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 Rect.fromLTWH 方法创建要绘制的矩形</span></span><br><span class="line">    <span class="keyword">final</span> rect = Rect.fromLTWH(left, top, _barWidth, data);</span><br><span class="line">    <span class="comment">// 使用 drawRect 方法绘制矩形</span></span><br><span class="line">    canvas.drawRect(rect, paint);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> offset = Offset(</span><br><span class="line">      left + _barWidth / <span class="number">2</span> - textFontSize * <span class="number">1.2</span>,</span><br><span class="line">      top - textFontSize * <span class="number">2</span>,</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 使用 TextPainter 绘制矩形上放的数值</span></span><br><span class="line">    TextPainter(</span><br><span class="line">      text: TextSpan(</span><br><span class="line">        text: data.toStringAsFixed(<span class="number">1</span>),</span><br><span class="line">        style: TextStyle(fontSize: textFontSize, color: paint.color),</span><br><span class="line">      ),</span><br><span class="line">      textAlign: TextAlign.center,</span><br><span class="line">      textDirection: TextDirection.ltr,</span><br><span class="line">    )</span><br><span class="line">      ..layout(</span><br><span class="line">        minWidth: <span class="number">0</span>,</span><br><span class="line">        maxWidth: textFontSize * data.toString().length,</span><br><span class="line">      )</span><br><span class="line">      ..paint(canvas, offset);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> xData = xAxis[i];</span><br><span class="line">    <span class="keyword">final</span> xOffset = Offset(left + _barWidth / <span class="number">2</span> - textFontSize, sh + <span class="number">12</span>);</span><br><span class="line">    <span class="comment">// 绘制横轴标识</span></span><br><span class="line">    TextPainter(</span><br><span class="line">      textAlign: TextAlign.center,</span><br><span class="line">      text: TextSpan(</span><br><span class="line">        text: <span class="string">'<span class="subst">$xData</span>'</span>,</span><br><span class="line">        style: TextStyle(fontSize: <span class="number">12</span>, color: Colors.black87),</span><br><span class="line">      ),</span><br><span class="line">      textDirection: TextDirection.ltr,</span><br><span class="line">    )</span><br><span class="line">      ..layout(</span><br><span class="line">        minWidth: <span class="number">0</span>,</span><br><span class="line">        maxWidth: size.width,</span><br><span class="line">      )</span><br><span class="line">      ..paint(canvas, xOffset);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">  _drawAxis(canvas, size);</span><br><span class="line">  _drawLabels(canvas, size);</span><br><span class="line">  _darwBars(canvas, size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下</p><img src="./images/flutter-bar-chart/chart-data.png" width="520" style="width:260px" alt="chart-data"><h3 id="添加运动动画"><a href="#添加运动动画" class="headerlink" title="添加运动动画"></a>添加运动动画</h3><p>最后在 <code>_BarChartState</code> 里使用一个 <code>AnimationController</code> 创建柱状图运动的动画，关于动画方面的知识可以查阅 <a href="https://coldstone.fun/post/2020/04/26/flutter-animation-from-zero/">从零开始的 Flutter 动画</a> 这篇文章。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_BarChartState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">BarChart</span>&gt; <span class="title">with</span> <span class="title">TickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  AnimationController _controller;</span><br><span class="line">  <span class="keyword">final</span> _animations = &lt;<span class="built_in">double</span>&gt;[];</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="built_in">double</span> begin = <span class="number">0.0</span>;</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">double</span>&gt; datas = widget.data;</span><br><span class="line">    <span class="comment">// 初始化动画控制器，并调用 forward 方法启动动画</span></span><br><span class="line">    _controller = AnimationController(</span><br><span class="line">      vsync: <span class="keyword">this</span>,</span><br><span class="line">      duration: <span class="built_in">Duration</span>(milliseconds: <span class="number">3000</span>),</span><br><span class="line">    )..forward();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; datas.length; i++) &#123;</span><br><span class="line">      <span class="keyword">final</span> <span class="built_in">double</span> end = datas[i];</span><br><span class="line">      <span class="comment">// 使用一个补间值 Tween 创建每个矩形的动画值</span></span><br><span class="line">      <span class="keyword">final</span> Tween&lt;<span class="built_in">double</span>&gt; tween = Tween(begin: begin, end: end);</span><br><span class="line">      <span class="comment">// 初始化数组里面的值</span></span><br><span class="line">      _animations.add(begin);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 创建补间动画</span></span><br><span class="line">      Animation&lt;<span class="built_in">double</span>&gt; animation = tween.animate(</span><br><span class="line">        CurvedAnimation(</span><br><span class="line">          parent: _controller,</span><br><span class="line">          curve: Curves.ease,</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line">      _controller.addListener(() &#123;</span><br><span class="line">        <span class="comment">// 使用 setState 更新 _animations 数组里面的动画值</span></span><br><span class="line">        setState(() &#123;</span><br><span class="line">          _animations[i] = animation.value;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">      children: [</span><br><span class="line">        CustomPaint(</span><br><span class="line">          <span class="comment">// 最后向 BarChartPainter 传入 _animations 数组，实现动画</span></span><br><span class="line">          painter: BarChartPainter(</span><br><span class="line">            datas: _animations,</span><br><span class="line">            xAxis: widget.xAxis,</span><br><span class="line">            animation: _controller,</span><br><span class="line">          ),</span><br><span class="line">          child: Container(width: <span class="number">300</span>, height: <span class="number">300</span>),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此整个柱状图的绘制就完成了，传入数据即可使用 🎉🎉🎉</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BarChart(</span><br><span class="line">  data: [<span class="number">180.0</span>, <span class="number">98.0</span>, <span class="number">126.0</span>, <span class="number">64.0</span>, <span class="number">118.0</span>],</span><br><span class="line">  xAxis: [<span class="string">'一月'</span>, <span class="string">'二月'</span>, <span class="string">'三月'</span>, <span class="string">'四月'</span>, <span class="string">'五月'</span>],</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>完整代码地址：<a href="https://github.com/xrr2016/flutter-charts/blob/master/lib/charts/bar_chart.dart" target="_blank" rel="noopener">bar_chart.dart</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文说明了什么是 <code>CustomPaint</code> 和 <code>CustomPainter</code>。以及如何使用它们绘制一个带有动画的柱状图表。</p><h2 id="附言"><a href="#附言" class="headerlink" title="附言"></a>附言</h2><p>准备写一系列关于用 Flutter 画图表的文章，用来分享这方面的知识，这篇文章是这个系列的开篇，预计一共会写 6 篇。</p><ol><li><a href="https://coldstone.fun/post/2020/05/31/flutter-bar-chart/">Flutter 绘制图表（一）柱状图📊</a>（本文）</li><li>Flutter 绘制图表（二）饼状图🍪</li><li>Flutter 绘制图表（三）折线图📈</li><li>Flutter 绘制图表（四）雷达图🎯</li><li>Flutter 绘制图表（五）环状图🍩</li><li>Flutter 绘制图表（六）条形图📏</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;./images/flutter-bar-chart/cover.png&quot; alt=&quot;bar&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Flutter" scheme="https://coldstone.fun/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>选择适合的 Flutter 动画控件</title>
    <link href="https://coldstone.fun/post/2020/05/07/flutter-animation-decision/"/>
    <id>https://coldstone.fun/post/2020/05/07/flutter-animation-decision/</id>
    <published>2020-05-07T02:04:58.000Z</published>
    <updated>2020-12-07T01:51:26.699Z</updated>
    
    <content type="html"><![CDATA[<p><img src="./images/flutter-animation-decision/level.png" alt="level"></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Flutter 团队推出了一个关于 <a href="https://www.youtube.com/watch?v=GXIJJkq_H8g" target="_blank" rel="noopener">如何在 Flutter 中选择合适的动画 Widget</a> 的视频以及配套的文章 <a href="https://medium.com/flutter/how-to-choose-which-flutter-animation-widget-is-right-for-you-79ecfb7e72b5" target="_blank" rel="noopener">How to Choose Which Flutter Animation Widget is Right for You? </a>都挺有好的，所以将文中的选择图翻译出来。</p><h2 id="英文版"><a href="#英文版" class="headerlink" title="英文版"></a>英文版</h2><p><img src="./images/flutter-animation-decision/animation-decision-tree.png" alt="animation-decision-tree"></p><h2 id="中文版"><a href="#中文版" class="headerlink" title="中文版"></a>中文版</h2><p><img src="./images/flutter-animation-decision/animation-decision-tree-zh.png" alt="animation-decision-tree-zh"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://medium.com/flutter/how-to-choose-which-flutter-animation-widget-is-right-for-you-79ecfb7e72b5" target="_blank" rel="noopener">How to Choose Which Flutter Animation Widget is Right for You?</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;./images/flutter-animation-decision/level.png&quot; alt=&quot;level&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Flutter" scheme="https://coldstone.fun/tags/Flutter/"/>
    
      <category term="Animation" scheme="https://coldstone.fun/tags/Animation/"/>
    
  </entry>
  
  <entry>
    <title>从零开始的 Flutter 动画</title>
    <link href="https://coldstone.fun/post/2020/04/26/flutter-animation-from-zero/"/>
    <id>https://coldstone.fun/post/2020/04/26/flutter-animation-from-zero/</id>
    <published>2020-04-26T12:00:00.000Z</published>
    <updated>2020-12-07T01:51:26.699Z</updated>
    
    <content type="html"><![CDATA[<p><img src="./images/flutter-animation-from-zero/cover.png" alt="cover"></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>动画本质是在一段时间内不断改变屏幕上显示的内容，从而产生<a href="https://zh.wikipedia.org/wiki/%E8%A6%96%E8%A6%BA%E6%9A%AB%E7%95%99" target="_blank" rel="noopener">视觉暂留</a>现象。</p><p>动画一般可分为两类：</p><p><strong>补间动画</strong>：补间动画是一种预先定义物体运动的起点和终点，物体的运动方式，运动时间，时间曲线，然后从起点过渡到终点的动画。</p><p><strong>基于物理的动画</strong>：基于物理的动画是一种模拟现实世界运动的动画，通过建立运动模型来实现。例如一个篮球🏀从高处落下，需要根据其下落高度，重力加速度，地面反弹力等影响因素来建立运动模型。</p><h2 id="Flutter-中的动画"><a href="#Flutter-中的动画" class="headerlink" title="Flutter 中的动画"></a>Flutter 中的动画</h2><p>Flutter 中有多种类型的动画，先从一个简单的例子开始，使用一个 <code>AnimatedContainer</code> 控件，然后设置动画时长 <code>duration</code>，最后调用 <code>setState</code> 方法改变需要变化的属性值，一个动画就创建了。</p><img src="./images/flutter-animation-from-zero/animated-container.gif" alt="animated-container" style="width:240px" width="240"><p>代码如下</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnimatedContainerPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _AnimatedContainerPageState createState() =&gt; _AnimatedContainerPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_AnimatedContainerPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">AnimatedContainerPage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// 初始的属性值</span></span><br><span class="line">  <span class="built_in">double</span> size = <span class="number">100</span>;</span><br><span class="line">  <span class="built_in">double</span> raidus = <span class="number">25</span>;</span><br><span class="line">  Color color = Colors.yellow;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _animate() &#123;</span><br><span class="line">    <span class="comment">// 改变属性值</span></span><br><span class="line">    setState(() &#123;</span><br><span class="line">      size = size == <span class="number">100</span> ? <span class="number">200</span> : <span class="number">100</span>;</span><br><span class="line">      raidus = raidus == <span class="number">25</span> ? <span class="number">100</span> : <span class="number">25</span>;</span><br><span class="line">      color = color == Colors.yellow ? Colors.greenAccent : Colors.yellow;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">'Animated Container'</span>)),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Column(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children: [</span><br><span class="line">            <span class="comment">// 在 AnimatedContainer 上应用属性值</span></span><br><span class="line">            AnimatedContainer(</span><br><span class="line">              width: size,</span><br><span class="line">              height: size,</span><br><span class="line">              curve: Curves.easeIn,</span><br><span class="line">              padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">20.0</span>),</span><br><span class="line">              decoration: BoxDecoration(</span><br><span class="line">                color: color,</span><br><span class="line">                borderRadius: BorderRadius.circular(raidus),</span><br><span class="line">              ),</span><br><span class="line">              duration: <span class="built_in">Duration</span>(seconds: <span class="number">1</span>),</span><br><span class="line">              child: FlutterLogo(),</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        onPressed: _animate,</span><br><span class="line">        child: Icon(Icons.refresh),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个隐式动画，除此之外还有显式动画，Hreo 动画，交织动画。</p><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p>Flutter 动画是建立在以下的概念之上。</p><p><code>Animation</code></p><p>Flutter 中的动画系统基于 <code>Animation</code> 对象， 它是一个抽象类，保存了当前动画的值和状态（开始、暂停、前进、倒退），但不记录屏幕上显示的内容。UI 元素通过读取 <code>Animation</code> 对象的值和监听状态变化运行 <code>build</code> 函数，然后渲染到屏幕上形成动画效果。</p><p>一个 <code>Animation</code> 对象在一段时间内会持续生成介于两个值之间的值，比较常见的类型是 <code>Animation&lt;double&gt;</code>，除 <code>double</code> 类型之外还有 <code>Animation&lt;Color&gt;</code> 或者 <code>Animation&lt;Size&gt;</code> 等。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animation</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Listenable</span> <span class="keyword">implements</span> <span class="title">ValueListenable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">/// <span class="markdown">...</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AnimationController</code></p><p>带有控制方法的 <code>Animation</code> 对象，用来控制动画的启动，暂停，结束，设定动画运行时间等。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnimationController</span> <span class="keyword">extends</span> <span class="title">Animation</span>&lt;<span class="title">double</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">with</span> <span class="title">AnimationEagerListenerMixin</span>, <span class="title">AnimationLocalListenersMixin</span>, <span class="title">AnimationLocalStatusListenersMixin</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// <span class="markdown">...</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AnimationController controller = AnimationController(</span><br><span class="line">  vsync: <span class="keyword">this</span>,</span><br><span class="line">  duration: <span class="built_in">Duration</span>(seconds: <span class="number">10</span>),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><code>Tween</code></p><p>用来生成不同类型和范围的动画取值。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tween</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">dynamic</span>&gt; <span class="keyword">extends</span> <span class="title">Animatable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  Tween(&#123; <span class="keyword">this</span>.begin, <span class="keyword">this</span>.end &#125;);</span><br><span class="line">  <span class="comment">/// <span class="markdown">...</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// double 类型</span></span><br><span class="line">Tween&lt;<span class="built_in">double</span>&gt; tween = Tween&lt;<span class="built_in">double</span>&gt;(begin: <span class="number">-200</span>, end: <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// color 类型</span></span><br><span class="line">ColorTween colorTween = ColorTween(begin: Colors.blue, end: Colors.yellow);</span><br><span class="line"></span><br><span class="line"><span class="comment">// border radius 类型</span></span><br><span class="line">BorderRadiusTween radiusTween = BorderRadiusTween(</span><br><span class="line">  begin: BorderRadius.circular(<span class="number">0.0</span>),</span><br><span class="line">  end: BorderRadius.circular(<span class="number">150.0</span>),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><code>Curve</code></p><p>Flutter 动画的默认动画过程是匀速的，使用 <code>CurvedAnimation</code> 可以将时间曲线定义为非线性曲线。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CurvedAnimation</span> <span class="keyword">extends</span> <span class="title">Animation</span>&lt;<span class="title">double</span>&gt; <span class="title">with</span> <span class="title">AnimationWithParentMixin</span>&lt;<span class="title">double</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">/// <span class="markdown">...</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Animation animation = CurvedAnimation(parent: controller, curve: Curves.easeIn);</span><br></pre></td></tr></table></figure><p><code>Ticker</code></p><p><code>Ticker</code> 用来添加每次屏幕刷新的回调函数 <code>TickerCallback</code>，每次屏幕刷新都会调用。类似于 Web 里面的 <code>requestAnimationFrame</code> 方法。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ticker</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// <span class="markdown">...</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Ticker ticker = Ticker(callback);</span><br></pre></td></tr></table></figure><h2 id="隐式动画"><a href="#隐式动画" class="headerlink" title="隐式动画"></a>隐式动画</h2><p>隐式动画使用 Flutter 框架内置的动画部件创建，通过设置动画的起始值和最终值来触发。当使用 <code>setState</code> 方法改变部件的动画属性值时，框架会自动计算出一个从旧值过渡到新值的动画。</p><p>比如 <code>AnimatedOpacity</code> 部件，改变它的 <code>opacity</code> 值就可以触发动画。</p><img src="./images/flutter-animation-from-zero/opacity-toggle.gif" alt="opacity-toggle" style="width:240px" width="240"><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OpacityChangePage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _OpacityChangePageState createState() =&gt; _OpacityChangePageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_OpacityChangePageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">OpacityChangePage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">double</span> _opacity = <span class="number">1.0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 改变目标值</span></span><br><span class="line">  <span class="keyword">void</span> _toggle() &#123;</span><br><span class="line">    _opacity = _opacity &gt; <span class="number">0</span> ? <span class="number">0.0</span> : <span class="number">1.0</span>;</span><br><span class="line">    setState(() &#123;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">'隐式动画'</span>)),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: AnimatedOpacity(</span><br><span class="line">          <span class="comment">// 传入目标值</span></span><br><span class="line">          opacity: _opacity,</span><br><span class="line">          duration: <span class="built_in">Duration</span>(seconds: <span class="number">1</span>),</span><br><span class="line">          child: Container(</span><br><span class="line">            width: <span class="number">200</span>,</span><br><span class="line">            height: <span class="number">200</span>,</span><br><span class="line">            color: Colors.blue,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        onPressed: _toggle,</span><br><span class="line">        child: Icon(Icons.play_arrow),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了 <code>AnimatedOpacity</code> 外，还有其他的内置隐式动画部件如：<code>AnimatedContainer</code>, <code>AnimatedPadding</code>, <code>AnimatedPositioned</code>, <code>AnimatedSwitcher</code>， <code>AnimatedAlign</code> 等。</p><h2 id="显式动画"><a href="#显式动画" class="headerlink" title="显式动画"></a>显式动画</h2><p>显式动画指的是需要手动设置动画的时间，运动曲线，取值范围的动画。将值传递给动画部件如: <code>RotationTransition</code>，最后使用一个<code>AnimationController</code> 控制动画的开始和结束。</p><img src="./images/flutter-animation-from-zero/explicit-animation.gif" alt="explicit-animation" style="width:240px" width="240"><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:math'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RotationAinmationPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _RotationAinmationPageState createState() =&gt; _RotationAinmationPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_RotationAinmationPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">RotationAinmationPage</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">with</span> <span class="title">SingleTickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  AnimationController _controller;</span><br><span class="line">  Animation&lt;<span class="built_in">double</span>&gt; _turns;</span><br><span class="line">  <span class="built_in">bool</span> _playing = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 控制动画运行状态</span></span><br><span class="line">  <span class="keyword">void</span> _toggle() &#123;</span><br><span class="line">    <span class="keyword">if</span> (_playing) &#123;</span><br><span class="line">      _playing = <span class="keyword">false</span>;</span><br><span class="line">      _controller.stop();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      _controller.forward()..whenComplete(() =&gt; _controller.reverse());</span><br><span class="line">      _playing = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    setState(() &#123;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="comment">// 初始化动画控制器，设置动画时间</span></span><br><span class="line">    _controller = AnimationController(</span><br><span class="line">      vsync: <span class="keyword">this</span>,</span><br><span class="line">      duration: <span class="built_in">Duration</span>(seconds: <span class="number">10</span>),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置动画取值范围和时间曲线</span></span><br><span class="line">    _turns = Tween(begin: <span class="number">0.0</span>, end: pi * <span class="number">2</span>).animate(</span><br><span class="line">      CurvedAnimation(parent: _controller, curve: Curves.easeIn),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">    _controller.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">'显示动画'</span>)),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: RotationTransition(</span><br><span class="line">          <span class="comment">// 传入动画值</span></span><br><span class="line">          turns: _turns,</span><br><span class="line">          child: Container(</span><br><span class="line">            width: <span class="number">200</span>,</span><br><span class="line">            height: <span class="number">200</span>,</span><br><span class="line">            child: Image.asset(</span><br><span class="line">              <span class="string">'assets/images/fan.png'</span>,</span><br><span class="line">              fit: BoxFit.cover,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        onPressed: _toggle,</span><br><span class="line">        child: Icon(_playing ? Icons.pause : Icons.play_arrow),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了 <code>RotationTransition</code> 外，还有其他的显示动画部件如：<code>FadeTransition</code>, <code>ScaleTransition</code>, <code>SizeTransition</code>, <code>SlideTransition</code> 等。</p><h2 id="Hero-动画"><a href="#Hero-动画" class="headerlink" title="Hero 动画"></a>Hero 动画</h2><p>Hero 动画指的是在页面切换时一个元素从旧页面运动到新页面的动画。Hero 动画需要使用两个 <code>Hero</code> 控件实现：一个用来在旧页面中，另一个在新页面。两个 <code>Hero</code> 控件需要使用相同的 <code>tag</code> 属性，并且不能与其他<code>tag</code>重复。</p><img src="./images/flutter-animation-from-zero/hero-animation.gif" alt="hero-animation" style="width:240px" width="240"><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 页面 1</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'hero_animation_page2.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span> cake1 = <span class="string">'assets/images/cake01.jpg'</span>;</span><br><span class="line"><span class="built_in">String</span> cake2 = <span class="string">'assets/images/cake02.jpg'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroAnimationPage1</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  GestureDetector buildRowItem(context, <span class="built_in">String</span> image) &#123;</span><br><span class="line">    <span class="keyword">return</span> GestureDetector(</span><br><span class="line">      onTap: () &#123;</span><br><span class="line">        <span class="comment">// 跳转到页面 2</span></span><br><span class="line">        Navigator.of(context).push(</span><br><span class="line">          MaterialPageRoute(builder: (ctx) &#123;</span><br><span class="line">            <span class="keyword">return</span> HeroAnimationPage2(image: image);</span><br><span class="line">          &#125;),</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">      child: Container(</span><br><span class="line">        width: <span class="number">100</span>,</span><br><span class="line">        height: <span class="number">100</span>,</span><br><span class="line">        child: Hero(</span><br><span class="line">          <span class="comment">// 设置 Hero 的 tag 属性</span></span><br><span class="line">          tag: image,</span><br><span class="line">          child: ClipOval(child: Image.asset(image)),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">'页面 1'</span>)),</span><br><span class="line">      body: Column(</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          SizedBox(height: <span class="number">40.0</span>),</span><br><span class="line">          Row(</span><br><span class="line">            mainAxisAlignment: MainAxisAlignment.spaceAround,</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              buildRowItem(context, cake1),</span><br><span class="line">              buildRowItem(context, cake2),</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 页面 2</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroAnimationPage2</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> image;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> HeroAnimationPage2(&#123;<span class="meta">@required</span> <span class="keyword">this</span>.image&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      body: CustomScrollView(</span><br><span class="line">        slivers: &lt;Widget&gt;[</span><br><span class="line">          SliverAppBar(</span><br><span class="line">            expandedHeight: <span class="number">400.0</span>,</span><br><span class="line">            title: Text(<span class="string">'页面 2'</span>),</span><br><span class="line">            backgroundColor: Colors.grey[<span class="number">200</span>],</span><br><span class="line">            flexibleSpace: FlexibleSpaceBar(</span><br><span class="line">              collapseMode: CollapseMode.parallax,</span><br><span class="line">              background: Hero(</span><br><span class="line">                <span class="comment">// 使用从页面 1 传入的 tag 值</span></span><br><span class="line">                tag: image,</span><br><span class="line">                child: Container(</span><br><span class="line">                  decoration: BoxDecoration(</span><br><span class="line">                    image: DecorationImage(</span><br><span class="line">                      image: AssetImage(image),</span><br><span class="line">                      fit: BoxFit.cover,</span><br><span class="line">                    ),</span><br><span class="line">                  ),</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          SliverList(</span><br><span class="line">            delegate: SliverChildListDelegate(</span><br><span class="line">              &lt;Widget&gt;[</span><br><span class="line">                Container(height: <span class="number">600.0</span>, color: Colors.grey[<span class="number">200</span>]),</span><br><span class="line">              ],</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="交织动画"><a href="#交织动画" class="headerlink" title="交织动画"></a>交织动画</h2><p>交织动画是由一系列的小动画组成的动画。每个小动画可以是连续或间断的，也可以相互重叠。其关键点在于使用 <code>Interval</code> 部件给每个小动画设置一个时间间隔，以及为每个动画的设置一个取值范围 <code>Tween</code>，最后使用一个 <code>AnimationController</code> 控制总体的动画状态。</p><p><code>Interval</code> 继承至 <code>Curve</code> 类，通过设置属性 <code>begin</code> 和 <code>end</code> 来确定这个小动画的运行范围。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Interval</span> <span class="keyword">extends</span> <span class="title">Curve</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// <span class="markdown">...</span></span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">动画起始点</span></span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> begin;</span><br><span class="line">  <span class="comment">/// <span class="markdown">动画结束点</span></span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> end;</span><br><span class="line">  <span class="comment">/// <span class="markdown">动画缓动曲线</span></span></span><br><span class="line">  <span class="keyword">final</span> Curve curve;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">...</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="./images/flutter-animation-from-zero/staggered-animation.gif" alt="staggered-animation" style="width:240px" width="240"><p>这是一个由 5 个小动画组成的交织动画，宽度，高度，颜色，圆角，边框，每个动画都有自己的动画区间。</p><p><img src="./images/flutter-animation-from-zero/staggered-animation-timeline.png" alt="staggered-animation-timeline"></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaggeredAnimationPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _StaggeredAnimationPageState createState() =&gt; _StaggeredAnimationPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_StaggeredAnimationPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">StaggeredAnimationPage</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">with</span> <span class="title">SingleTickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  AnimationController _controller;</span><br><span class="line">  Animation&lt;<span class="built_in">double</span>&gt; _width;</span><br><span class="line">  Animation&lt;<span class="built_in">double</span>&gt; _height;</span><br><span class="line">  Animation&lt;Color&gt; _color;</span><br><span class="line">  Animation&lt;<span class="built_in">double</span>&gt; _border;</span><br><span class="line">  Animation&lt;BorderRadius&gt; _borderRadius;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _play() &#123;</span><br><span class="line">    <span class="keyword">if</span> (_controller.isCompleted) &#123;</span><br><span class="line">      _controller.reverse();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      _controller.forward();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line"></span><br><span class="line">    _controller = AnimationController(</span><br><span class="line">      vsync: <span class="keyword">this</span>,</span><br><span class="line">      duration: <span class="built_in">Duration</span>(seconds: <span class="number">5</span>),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    _width = Tween&lt;<span class="built_in">double</span>&gt;(</span><br><span class="line">      begin: <span class="number">100</span>,</span><br><span class="line">      end: <span class="number">300</span>,</span><br><span class="line">    ).animate(</span><br><span class="line">      CurvedAnimation(</span><br><span class="line">        parent: _controller,</span><br><span class="line">        curve: Interval(</span><br><span class="line">          <span class="number">0.0</span>,</span><br><span class="line">          <span class="number">0.2</span>,</span><br><span class="line">          curve: Curves.ease,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    _height = Tween&lt;<span class="built_in">double</span>&gt;(</span><br><span class="line">      begin: <span class="number">100</span>,</span><br><span class="line">      end: <span class="number">300</span>,</span><br><span class="line">    ).animate(</span><br><span class="line">      CurvedAnimation(</span><br><span class="line">        parent: _controller,</span><br><span class="line">        curve: Interval(</span><br><span class="line">          <span class="number">0.2</span>,</span><br><span class="line">          <span class="number">0.4</span>,</span><br><span class="line">          curve: Curves.ease,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    _color = ColorTween(</span><br><span class="line">      begin: Colors.blue,</span><br><span class="line">      end: Colors.yellow,</span><br><span class="line">    ).animate(</span><br><span class="line">      CurvedAnimation(</span><br><span class="line">        parent: _controller,</span><br><span class="line">        curve: Interval(</span><br><span class="line">          <span class="number">0.4</span>,</span><br><span class="line">          <span class="number">0.6</span>,</span><br><span class="line">          curve: Curves.ease,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    _borderRadius = BorderRadiusTween(</span><br><span class="line">      begin: BorderRadius.circular(<span class="number">0.0</span>),</span><br><span class="line">      end: BorderRadius.circular(<span class="number">150.0</span>),</span><br><span class="line">    ).animate(</span><br><span class="line">      CurvedAnimation(</span><br><span class="line">        parent: _controller,</span><br><span class="line">        curve: Interval(</span><br><span class="line">          <span class="number">0.6</span>,</span><br><span class="line">          <span class="number">0.8</span>,</span><br><span class="line">          curve: Curves.ease,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    _border = Tween&lt;<span class="built_in">double</span>&gt;(</span><br><span class="line">      begin: <span class="number">0</span>,</span><br><span class="line">      end: <span class="number">25</span>,</span><br><span class="line">    ).animate(</span><br><span class="line">      CurvedAnimation(</span><br><span class="line">        parent: _controller,</span><br><span class="line">        curve: Interval(<span class="number">0.8</span>, <span class="number">1.0</span>),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">'交织动画'</span>)),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: AnimatedBuilder(</span><br><span class="line">          animation: _controller,</span><br><span class="line">          builder: (BuildContext context, Widget child) &#123;</span><br><span class="line">            <span class="keyword">return</span> Container(</span><br><span class="line">              width: _width.value,</span><br><span class="line">              height: _height.value,</span><br><span class="line">              decoration: BoxDecoration(</span><br><span class="line">                color: _color.value,</span><br><span class="line">                borderRadius: _borderRadius.value,</span><br><span class="line">                border: Border.all(</span><br><span class="line">                  width: _border.value,</span><br><span class="line">                  color: Colors.orange,</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        onPressed: _play,</span><br><span class="line">        child: Icon(Icons.refresh),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="物理动画"><a href="#物理动画" class="headerlink" title="物理动画"></a>物理动画</h2><p>物理动画是一种模拟现实世界物体运动的动画。需要建立物体的运动模型，以一个物体下落为例，这个运动受到物体的下落高度，重力加速度，地面的反作用力等因素的影响。</p><img src="./images/flutter-animation-from-zero/throw-animation.gif" alt="throw-animation" style="width:240px" width="240"><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/scheduler.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThrowAnimationPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _ThrowAnimationPageState createState() =&gt; _ThrowAnimationPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ThrowAnimationPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">ThrowAnimationPage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// 球心高度</span></span><br><span class="line">  <span class="built_in">double</span> y = <span class="number">70.0</span>;</span><br><span class="line">  <span class="comment">// Y 轴速度</span></span><br><span class="line">  <span class="built_in">double</span> vy = <span class="number">-10.0</span>;</span><br><span class="line">  <span class="comment">// 重力</span></span><br><span class="line">  <span class="built_in">double</span> gravity = <span class="number">0.1</span>;</span><br><span class="line">  <span class="comment">// 地面反弹力</span></span><br><span class="line">  <span class="built_in">double</span> bounce = <span class="number">-0.5</span>;</span><br><span class="line">  <span class="comment">// 球的半径</span></span><br><span class="line">  <span class="built_in">double</span> radius = <span class="number">50.0</span>;</span><br><span class="line">  <span class="comment">// 地面高度</span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> height = <span class="number">700</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 下落方法</span></span><br><span class="line">  <span class="keyword">void</span> _fall(_) &#123;</span><br><span class="line">    y += vy;</span><br><span class="line">    vy += gravity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果球体接触到地面，根据地面反弹力改变球体的 Y 轴速度</span></span><br><span class="line">    <span class="keyword">if</span> (y + radius &gt; height) &#123;</span><br><span class="line">      y = height - radius;</span><br><span class="line">      vy *= bounce;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (y - radius &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      y = <span class="number">0</span> + radius;</span><br><span class="line">      vy *= bounce;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setState(() &#123;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="comment">// 使用一个 Ticker 在每次更新界面时运行球体下落方法</span></span><br><span class="line">    Ticker(_fall)..start();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="built_in">double</span> screenWidth = MediaQuery.of(context).size.width;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">'物理动画'</span>)),</span><br><span class="line">      body: Column(</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          Container(</span><br><span class="line">            height: height,</span><br><span class="line">            child: Stack(</span><br><span class="line">              children: &lt;Widget&gt;[</span><br><span class="line">                Positioned(</span><br><span class="line">                  top: y - radius,</span><br><span class="line">                  left: screenWidth / <span class="number">2</span> - radius,</span><br><span class="line">                  child: Container(</span><br><span class="line">                    width: radius * <span class="number">2</span>,</span><br><span class="line">                    height: radius * <span class="number">2</span>,</span><br><span class="line">                    decoration: BoxDecoration(</span><br><span class="line">                      color: Colors.blue,</span><br><span class="line">                      shape: BoxShape.circle,</span><br><span class="line">                    ),</span><br><span class="line">                  ),</span><br><span class="line">                ),</span><br><span class="line">              ],</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          Expanded(child: Container(color: Colors.blue)),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文介绍了 Flutter 中多种类型的动画，分别是</p><ul><li>隐式动画</li><li>显式动画</li><li>Hero 动画</li><li>交织动画</li><li>基于物理的动画</li></ul><p>一个动画的主要因素有</p><ul><li><code>Animation</code> 动画对象</li><li><code>AnimationController</code> 动画控制器</li><li><code>Tween</code> 动画取值范围</li><li><code>Curve</code> 动画运动曲线</li></ul><p>Flutter 动画基于类型化的 <code>Animation</code> 对象，<code>Widgets</code> 通过读取动画对象的当前值和监听状态变化重新运行 <code>build</code> 函数，不断变化 UI 形成动画效果。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://medium.com/flutter/flutter-animation-basics-with-implicit-animations-95db481c5916" target="_blank" rel="noopener">Flutter animation basics with implicit animations</a></p><p><a href="https://medium.com/flutter/directional-animations-with-built-in-explicit-animations-3e7c5e6fbbd7" target="_blank" rel="noopener">Directional animations with built-in explicit animations</a></p><p><a href="https://flutter.cn/docs/development/ui/animations" target="_blank" rel="noopener">动画效果介绍</a></p><p><a href="https://book.flutterchina.club/chapter9/intro.html" target="_blank" rel="noopener">Flutter动画简介</a></p><p><a href="https://flutter.cn/docs/development/ui/animations/tutorial" target="_blank" rel="noopener">在 Flutter 应用里实现动画效果</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;./images/flutter-animation-from-zero/cover.png&quot; alt=&quot;cover&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Flutter" scheme="https://coldstone.fun/tags/Flutter/"/>
    
      <category term="Animation" scheme="https://coldstone.fun/tags/Animation/"/>
    
  </entry>
  
  <entry>
    <title>在 Flutter 里使用 Stream</title>
    <link href="https://coldstone.fun/post/2020/04/13/flutter-stream/"/>
    <id>https://coldstone.fun/post/2020/04/13/flutter-stream/</id>
    <published>2020-04-13T04:07:56.000Z</published>
    <updated>2020-12-07T01:51:26.703Z</updated>
    
    <content type="html"><![CDATA[<p><img src="./images/flutter-stream/stream.png" alt="stream"></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 Flutter 中有两种处理异步操作的方式 <code>Future</code> 和 <code>Stream</code>，<code>Future</code> 用于处理单个异步操作，<code>Stream</code> 用来处理连续的异步操作。比如往水杯倒水，将一个水杯倒满为一个 <code>Future</code>，连续的将多个水杯倒满就是 <code>Stream</code>。</p><p><img src="./images/flutter-stream/water-fill.png" alt="water-fill"></p><h2 id="Stream-详解"><a href="#Stream-详解" class="headerlink" title="Stream 详解"></a>Stream 详解</h2><p><code>Stream</code> 是一个抽象类，用于表示一序列异步数据的源。它是一种产生连续事件的方式，可以生成数据事件或者错误事件，以及流结束时的完成事件。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Stream</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  Stream();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Stream</code> 分单订阅流和广播流。</p><p>单订阅流在发送完成事件之前只允许设置一个监听器，并且只有在流上设置监听器后才开始产生事件，取消监听器后将停止发送事件。即使取消了第一个监听器，也不允许在单订阅流上设置其他的监听器。广播流则允许设置多个监听器，也可以在取消上一个监听器后再次添加新的监听器。</p><p><code>Stream</code> 有同步流和异步流之分。</p><p>它们的区别在于同步流会在执行 <code>add</code>，<code>addError</code> 或 <code>close</code> 方法时立即向流的监听器 <code>StreamSubscription</code> 发送事件，而异步流总是在事件队列中的代码执行完成后在发送事件。</p><h2 id="Stream-家族"><a href="#Stream-家族" class="headerlink" title="Stream 家族"></a><code>Stream</code> 家族</h2><p><code>StreamController</code></p><p>带有控制流方法的流。 可以向它的流发送数据，错误和完成事件，也可以检查数据流是否已暂停，是否有监听器。<code>sync</code> 参数决定这个流是同步流还是异步流。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamController</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">StreamSink</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  Stream&lt;T&gt; <span class="keyword">get</span> stream;</span><br><span class="line">  <span class="comment">/// <span class="markdown">...</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">StreamController _streamController = StreamController(</span><br><span class="line">  onCancel: () &#123;&#125;,</span><br><span class="line">  onListen: () &#123;&#125;,</span><br><span class="line">  onPause: () &#123;&#125;,</span><br><span class="line">  onResume: () &#123;&#125;,</span><br><span class="line">  <span class="keyword">sync</span>: <span class="keyword">false</span>,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><code>StreamSink</code></p><p>流事件的入口。提供 <code>add</code>，<code>addError</code>，<code>addStream</code> 方法向流发送事件。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamSink</span>&lt;<span class="title">S</span>&gt; <span class="keyword">implements</span> <span class="title">EventSink</span>&lt;<span class="title">S</span>&gt;, <span class="title">StreamConsumer</span>&lt;<span class="title">S</span>&gt; </span>&#123;</span><br><span class="line">  Future close();</span><br><span class="line">  <span class="comment">/// <span class="markdown">...</span></span></span><br><span class="line">  Future <span class="keyword">get</span> done;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>StreamSubscription</code></p><p>流的监听器。提供 <code>cacenl</code>、<code>pause</code>, <code>resume</code> 等方法管理。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamSubscription</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">/// <span class="markdown">...</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">StreamSubscription subscription = StreamController().stream.listen(<span class="built_in">print</span>);</span><br><span class="line">subscription.onDone(() =&gt; <span class="built_in">print</span>(<span class="string">'done'</span>));</span><br></pre></td></tr></table></figure><p><code>StreamBuilder</code></p><p>使用流数据渲染 UI 界面的部件。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">StreamBuilder(</span><br><span class="line">  <span class="comment">// 数据流</span></span><br><span class="line">  stream: stream,</span><br><span class="line">  <span class="comment">// 初始数据</span></span><br><span class="line">  initialData: <span class="string">'loading...'</span>,</span><br><span class="line">  builder: (context, AsyncSnapshot snapshot) &#123;</span><br><span class="line">    <span class="comment">// AsyncSnapshot 对象为数据快照，缓存了当前数据和状态</span></span><br><span class="line">    <span class="comment">// snapshot.connectionState</span></span><br><span class="line">    <span class="comment">// snapshot.data</span></span><br><span class="line">    <span class="keyword">if</span> (snapshot.hasData) &#123;</span><br><span class="line">      <span class="built_in">Map</span> data = snapshot.data;</span><br><span class="line">      <span class="keyword">return</span> Text(data),</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> CircularProgressIndicator();</span><br><span class="line">  &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="创建-Stream"><a href="#创建-Stream" class="headerlink" title="创建 Stream"></a>创建 Stream</h2><p>在 Dart 有几种方式创建 <code>Stream</code></p><ol><li>从现有的生成一个新的流 <code>Stream</code>，使用 <code>map</code>，<code>where</code>，<code>takeWhile</code> 等方法。</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 整数流</span></span><br><span class="line">Stream&lt;<span class="built_in">int</span>&gt; intStream = StreamController&lt;<span class="built_in">int</span>&gt;().stream;</span><br><span class="line"><span class="comment">// 偶数流</span></span><br><span class="line">Stream&lt;<span class="built_in">int</span>&gt; evenStream = intStream.where((<span class="built_in">int</span> n) =&gt; n.isEven);</span><br><span class="line"><span class="comment">// 两倍流</span></span><br><span class="line">Stream&lt;<span class="built_in">int</span>&gt; doubleStream = intStream.map((<span class="built_in">int</span> n) =&gt; n * <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 数字大于 10 的流</span></span><br><span class="line">Stream&lt;<span class="built_in">int</span>&gt; biggerStream = intStream.takeWhile((<span class="built_in">int</span> n) =&gt; n &gt; <span class="number">10</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>使用 <code>async*</code> 函数。</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;<span class="built_in">int</span>&gt; countStream(<span class="built_in">int</span> to) <span class="keyword">async</span>* &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= to; i++) &#123;</span><br><span class="line">    <span class="keyword">yield</span> i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Stream stream = countStream(<span class="number">10</span>);</span><br><span class="line">stream.listen(<span class="built_in">print</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>使用 <code>StreamController</code>。</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">StreamController&lt;<span class="built_in">Map</span>&gt; _streamController = StreamController(</span><br><span class="line">  onCancel: () &#123;&#125;,</span><br><span class="line">  onListen: () &#123;&#125;,</span><br><span class="line">  onPause: () &#123;&#125;,</span><br><span class="line">  onResume: () &#123;&#125;,</span><br><span class="line">  <span class="keyword">sync</span>: <span class="keyword">false</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">Stream _stream = _streamController.stream;</span><br></pre></td></tr></table></figure><ol start="4"><li>使用 <code>Future</code> 对象生成</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Future&lt;<span class="built_in">int</span>&gt; _delay(<span class="built_in">int</span> seconds) <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">await</span> Future.delayed(<span class="built_in">Duration</span>(seconds: seconds));</span><br><span class="line">  <span class="keyword">return</span> seconds;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">List</span>&lt;Future&gt; futures = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  futures.add(_delay(<span class="number">3</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Stream _futuresStream = Stream.fromFutures(futures);</span><br></pre></td></tr></table></figure><h2 id="应用-Stream"><a href="#应用-Stream" class="headerlink" title="应用 Stream"></a>应用 Stream</h2><p><em>Stream Counter</em></p><p>把 Flutter 的默认项目改用 <code>Stream</code> 实现</p><img src="./images/flutter-stream/stream-counter.gif" width="320" style="width:320px"><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:async'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StreamCounter</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _StreamCounterState createState() =&gt; _StreamCounterState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_StreamCounterState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">StreamCounter</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// 创建一个 StreamController</span></span><br><span class="line">  StreamController&lt;<span class="built_in">int</span>&gt; _counterStreamController = StreamController&lt;<span class="built_in">int</span>&gt;(</span><br><span class="line">    onCancel: () &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">'cancel'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    onListen: () &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">'listen'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">int</span> _counter = <span class="number">0</span>;</span><br><span class="line">  Stream _counterStream;</span><br><span class="line">  StreamSink _counterSink;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用 StreamSink 向 Stream 发送事件，当 _counter 大于 9 时调用 close 方法关闭流。</span></span><br><span class="line">  <span class="keyword">void</span> _incrementCounter() &#123;</span><br><span class="line">    <span class="keyword">if</span> (_counter &gt; <span class="number">9</span>) &#123;</span><br><span class="line">      _counterSink.close();</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    _counter++;</span><br><span class="line">    _counterSink.add(_counter);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 主动关闭流</span></span><br><span class="line">  <span class="keyword">void</span> _closeStream() &#123;</span><br><span class="line">    _counterStreamController.close();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    _counterSink = _counterStreamController.sink;</span><br><span class="line">    _counterStream = _counterStreamController.stream;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">    _counterSink.close();</span><br><span class="line">    _counterStreamController.close();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">'Stream Counter'</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Column(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            Text(<span class="string">'You have pushed the button this many times:'</span>),</span><br><span class="line">            <span class="comment">// 使用 StreamBuilder 显示和更新 UI</span></span><br><span class="line">            StreamBuilder&lt;<span class="built_in">int</span>&gt;(</span><br><span class="line">              stream: _counterStream,</span><br><span class="line">              initialData: _counter,</span><br><span class="line">              builder: (context, snapshot) &#123;</span><br><span class="line">                <span class="keyword">if</span> (snapshot.connectionState == ConnectionState.done) &#123;</span><br><span class="line">                  <span class="keyword">return</span> Text(</span><br><span class="line">                    <span class="string">'Done'</span>,</span><br><span class="line">                    style: Theme.of(context).textTheme.bodyText2,</span><br><span class="line">                  );</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">int</span> number = snapshot.data;</span><br><span class="line">                <span class="keyword">return</span> Text(</span><br><span class="line">                  <span class="string">'<span class="subst">$number</span>'</span>,</span><br><span class="line">                  style: Theme.of(context).textTheme.bodyText2,</span><br><span class="line">                );</span><br><span class="line">              &#125;,</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: Row(</span><br><span class="line">        mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          FloatingActionButton(</span><br><span class="line">            onPressed: _incrementCounter,</span><br><span class="line">            tooltip: <span class="string">'Increment'</span>,</span><br><span class="line">            child: Icon(Icons.add),</span><br><span class="line">          ),</span><br><span class="line">          SizedBox(width: <span class="number">24.0</span>),</span><br><span class="line">          FloatingActionButton(</span><br><span class="line">            onPressed: _closeStream,</span><br><span class="line">            tooltip: <span class="string">'Close'</span>,</span><br><span class="line">            child: Icon(Icons.close),</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>NetWork Status</em></p><p>监听手机的网络链接状态，首先添加 <code>connectivity</code> 插件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">connectivity:</span> <span class="string">^0.4.8+2</span></span><br></pre></td></tr></table></figure><img src="./images/flutter-stream/network-status.gif" width="320" style="width:320px"><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:async'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:connectivity/connectivity.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetWorkStatus</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _NetWorkStatusState createState() =&gt; _NetWorkStatusState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_NetWorkStatusState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">NetWorkStatus</span>&gt; </span>&#123;</span><br><span class="line">  StreamController&lt;ConnectivityResult&gt; _streamController = StreamController();</span><br><span class="line">  StreamSink _streamSink;</span><br><span class="line">  Stream _stream;</span><br><span class="line">  <span class="built_in">String</span> _result;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _checkStatus() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> ConnectivityResult result = <span class="keyword">await</span> Connectivity().checkConnectivity();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result == ConnectivityResult.mobile) &#123;</span><br><span class="line">      _result = <span class="string">'mobile'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result == ConnectivityResult.wifi) &#123;</span><br><span class="line">      _result = <span class="string">'wifi'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result == ConnectivityResult.none) &#123;</span><br><span class="line">      _result = <span class="string">'none'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setState(() &#123;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    _stream = _streamController.stream;</span><br><span class="line">    _streamSink = _streamController.sink;</span><br><span class="line">    _checkStatus();</span><br><span class="line">    Connectivity().onConnectivityChanged.listen(</span><br><span class="line">      (ConnectivityResult result) &#123;</span><br><span class="line">        _streamSink.add(result);</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  dispose() &#123;</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">    _streamSink.close();</span><br><span class="line">    _streamController.close();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">'Network Status'</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: StreamBuilder&lt;ConnectivityResult&gt;(</span><br><span class="line">          stream: _stream,</span><br><span class="line">          builder: (context, AsyncSnapshot snapshot) &#123;</span><br><span class="line">            <span class="keyword">if</span> (snapshot.hasData) &#123;</span><br><span class="line">              <span class="keyword">if</span> (snapshot.data == ConnectivityResult.mobile) &#123;</span><br><span class="line">                _result = <span class="string">'mobile'</span>;</span><br><span class="line">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (snapshot.data == ConnectivityResult.wifi) &#123;</span><br><span class="line">                _result = <span class="string">'wifi'</span>;</span><br><span class="line">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (snapshot.data == ConnectivityResult.none) &#123;</span><br><span class="line">                <span class="keyword">return</span> Text(<span class="string">'还没有链接网络'</span>);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (_result == <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> CircularProgressIndicator();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> ResultText(_result);</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResultText</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> result;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> ResultText(<span class="keyword">this</span>.result);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> RichText(</span><br><span class="line">      text: TextSpan(</span><br><span class="line">        style: TextStyle(color: Colors.black),</span><br><span class="line">        text: <span class="string">'正在使用'</span>,</span><br><span class="line">        children: [</span><br><span class="line">          TextSpan(</span><br><span class="line">            text: <span class="string">' <span class="subst">$result</span> '</span>,</span><br><span class="line">            style: TextStyle(</span><br><span class="line">              color: Colors.red,</span><br><span class="line">              fontSize: <span class="number">20.0</span>,</span><br><span class="line">              fontWeight: FontWeight.bold,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          TextSpan(text: <span class="string">'链接网络'</span>),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Random Article</code></p><p>请求网络数据创建流</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">dio:</span> <span class="string">^3.0.9</span></span><br><span class="line">  <span class="attr">flutter_html:</span> <span class="string">^0.11.1</span></span><br></pre></td></tr></table></figure><img src="./images/flutter-stream/random-article.gif" width="320" style="width:320px"><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:async'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:dio/dio.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter_html/flutter_html.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomArticle</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _RandomArticleState createState() =&gt; _RandomArticleState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_RandomArticleState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">RandomArticle</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> Dio _dio = Dio(</span><br><span class="line">    BaseOptions(baseUrl: <span class="string">'https://interface.meiriyiwen.com'</span>),</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> Future&lt;<span class="built_in">Map</span>&gt; _getArticle() <span class="keyword">async</span> &#123;</span><br><span class="line">    Response response = <span class="keyword">await</span> _dio.<span class="keyword">get</span>(</span><br><span class="line">      <span class="string">'/article/random'</span>,</span><br><span class="line">      queryParameters: &#123;<span class="string">"dev"</span>: <span class="number">1</span>&#125;,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> data = response.data[<span class="string">'data'</span>];</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Stream&lt;<span class="built_in">Map</span>&gt; _futuresStream;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="built_in">List</span>&lt;Future&lt;<span class="built_in">Map</span>&gt;&gt; futures = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">      <span class="comment">// 添加 Future</span></span><br><span class="line">      futures.add(_getArticle());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成 Stream</span></span><br><span class="line">    _futuresStream = Stream&lt;<span class="built_in">Map</span>&gt;.fromFutures(futures);</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">'Random Article'</span>)),</span><br><span class="line">      body: SingleChildScrollView(</span><br><span class="line">        child: Center(</span><br><span class="line">          child: StreamBuilder&lt;<span class="built_in">Map</span>&gt;(</span><br><span class="line">            stream: _futuresStream,</span><br><span class="line">            builder: (context, AsyncSnapshot snapshot) &#123;</span><br><span class="line">              <span class="keyword">if</span> (snapshot.hasData) &#123;</span><br><span class="line">                <span class="built_in">Map</span> article = snapshot.data;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> Container(</span><br><span class="line">                  child: Column(</span><br><span class="line">                    children: &lt;Widget&gt;[</span><br><span class="line">                      SizedBox(height: <span class="number">24.0</span>),</span><br><span class="line">                      Text(</span><br><span class="line">                        article[<span class="string">'title'</span>],</span><br><span class="line">                        style: TextStyle(fontSize: <span class="number">24.0</span>),</span><br><span class="line">                      ),</span><br><span class="line">                      Padding(</span><br><span class="line">                        padding: <span class="keyword">const</span> EdgeInsets.only(</span><br><span class="line">                          top: <span class="number">12.0</span>,</span><br><span class="line">                          left: <span class="number">12.0</span>,</span><br><span class="line">                          right: <span class="number">12.0</span>,</span><br><span class="line">                          bottom: <span class="number">60.0</span>,</span><br><span class="line">                        ),</span><br><span class="line">                        child: Html(</span><br><span class="line">                          data: article[<span class="string">'content'</span>],</span><br><span class="line">                        ),</span><br><span class="line">                      ),</span><br><span class="line">                    ],</span><br><span class="line">                  ),</span><br><span class="line">                );</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">return</span> CircularProgressIndicator();</span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Broadcast Stream</code></p><p>使用广播流</p><img src="./images/flutter-stream/broadcast-stream.gif" width="320" style="width:320px"><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:async'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BroadcastStream</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _BroadcastStreamState createState() =&gt; _BroadcastStreamState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_BroadcastStreamState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">BroadcastStream</span>&gt; </span>&#123;</span><br><span class="line">  StreamController&lt;<span class="built_in">int</span>&gt; _streamController = StreamController&lt;<span class="built_in">int</span>&gt;.broadcast();</span><br><span class="line">  StreamSubscription _subscription1;</span><br><span class="line">  StreamSubscription _subscription2;</span><br><span class="line">  StreamSubscription _subscription3;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">int</span> _count = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">int</span> _s1 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">int</span> _s2 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">int</span> _s3 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    _subscription1 = _streamController.stream.listen((n) &#123;</span><br><span class="line">      setState(() &#123;</span><br><span class="line">        _s1 += <span class="number">1</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    _subscription2 = _streamController.stream.listen((n) &#123;</span><br><span class="line">      setState(() &#123;</span><br><span class="line">        _s2 += <span class="number">2</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    _subscription3 = _streamController.stream.listen((n) &#123;</span><br><span class="line">      setState(() &#123;</span><br><span class="line">        _s3 -= <span class="number">1</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _add() &#123;</span><br><span class="line">    <span class="keyword">if</span> (_count &gt; <span class="number">10</span>) &#123;</span><br><span class="line">      <span class="comment">// 大于 10 时停止第一个订阅</span></span><br><span class="line">      _subscription1.cancel();</span><br><span class="line">    &#125;</span><br><span class="line">    _count++;</span><br><span class="line">    _streamController.add(_count);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">    _streamController.close();</span><br><span class="line">    _subscription1.cancel();</span><br><span class="line">    _subscription2.cancel();</span><br><span class="line">    _subscription3.cancel();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">'Broadcast Stream'</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Container(</span><br><span class="line">        width: <span class="built_in">double</span>.infinity,</span><br><span class="line">        height: MediaQuery.of(context).size.height,</span><br><span class="line">        child: Column(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          crossAxisAlignment: CrossAxisAlignment.center,</span><br><span class="line">          children: [</span><br><span class="line">            Text(<span class="string">'Count: <span class="subst">$_count</span>'</span>),</span><br><span class="line">            SizedBox(height: <span class="number">12.0</span>),</span><br><span class="line">            Text(<span class="string">'S1: <span class="subst">$_s1</span>'</span>),</span><br><span class="line">            SizedBox(height: <span class="number">12.0</span>),</span><br><span class="line">            Text(<span class="string">'S2: <span class="subst">$_s2</span>'</span>),</span><br><span class="line">            SizedBox(height: <span class="number">12.0</span>),</span><br><span class="line">            Text(<span class="string">'S3: <span class="subst">$_s3</span>'</span>),</span><br><span class="line">            SizedBox(height: <span class="number">12.0</span>),</span><br><span class="line">            FloatingActionButton(</span><br><span class="line">              onPressed: _add,</span><br><span class="line">              child: Icon(Icons.plus_one),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>Stream</code> 是处理异步编程的方式之一，它提供一个了异步的事件序列，并在你准备好接受时发送。在 Dart 中流分为同步流和异步流，以及单订阅流和广播流，有多种方式创建 <code>Stream</code>。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://dart.cn/tutorials/language/streams" target="_blank" rel="noopener">异步编程：使用 stream</a></p><p><a href="https://dart.cn/articles/libraries/creating-streams" target="_blank" rel="noopener">在 Dart 里使用 Stream</a></p><p><a href="https://guoshuyu.cn/home/wx/Flutter-11.html" target="_blank" rel="noopener">全面深入理解Stream</a></p><p><a href="https://codingwithjoe.com/flutter-building-a-widget-with-streambuilder/" target="_blank" rel="noopener">Building a Widget with StreamBuilder</a></p><p><a href="https://youtu.be/MkKEWHfy99Y" target="_blank" rel="noopener">StreamBuilder (Flutter 本周小部件)</a></p><p><a href="https://youtu.be/nQBpOIHE4eE" target="_blank" rel="noopener">Dart Streams - 聚焦 Flutter</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;./images/flutter-stream/stream.png&quot; alt=&quot;stream&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Flutter" scheme="https://coldstone.fun/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 是如何渲染的？</title>
    <link href="https://coldstone.fun/post/2020/04/03/how-flutter-render/"/>
    <id>https://coldstone.fun/post/2020/04/03/how-flutter-render/</id>
    <published>2020-04-03T04:40:04.000Z</published>
    <updated>2020-12-07T01:51:26.703Z</updated>
    
    <content type="html"><![CDATA[<p><img src="./images/how-flutter-render/cover.jpg" alt="cover"></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用 Flutter 开发移动端有一段时间了，总结一下关于 UI 渲染方面的知识。了解关于 Flutter 渲染方面的知识还是有必要的，可以帮助你开发更稳定，性能更高的应用。</p><p>要解答这个问题，首先需要认识到 Flutter 中有三棵树：<code>Widget</code> 树，<code>Element</code> 树和 <code>RenderObject</code> 树。</p><p>当应用启动时 Flutter 会遍历并创建所有的 <code>Widget</code> 形成 <code>Widget Tree</code>，同时与 <code>Widget Tree</code> 相对应，通过调用 <code>Widget</code> 上的 <code>createElement()</code> 方法创建每个 <code>Element</code> 对象，形成 <code>Element Tree</code>。</p><p>最后调用 <code>Element</code> 的 <code>createRenderObject()</code> 方法创建每个渲染对象，形成一个 <code>Render Tree</code>。</p><p>然后需要知道 <code>Widget</code>，<code>Element</code> 和 <code>RenderObject</code> 到底是啥以及它们是干什么的。</p><h2 id="什么是-Widget"><a href="#什么是-Widget" class="headerlink" title="什么是 Widget"></a>什么是 Widget</h2><p><code>Widget</code> 是 Flutter 的核心部分，是用户界面的不可变描述信息。正如 Flutter 的口号 <code>Everything’s a widget</code>, 用 Flutter 开发应用就是在写 <code>Widget</code> 🐶。</p><p>Flutter 的 <code>Widget</code> 不只表示 UI 控件，还表示一些功能性的组件，如路由跳转 <code>Navigator</code>，手势检测 <code>GestureDetector</code> 组件等。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@immutable</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Widget</span> <span class="keyword">extends</span> <span class="title">DiagnosticableTree</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// <span class="markdown">Initializes [key] for subclasses.</span></span></span><br><span class="line">  <span class="keyword">const</span> Widget(&#123; <span class="keyword">this</span>.key &#125;);</span><br><span class="line">  <span class="keyword">final</span> Key key;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">...</span></span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@protected</span></span><br><span class="line">  <span class="built_in">Element</span> createElement();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">...</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">bool</span> canUpdate(Widget oldWidget, Widget newWidget) &#123;</span><br><span class="line">    <span class="keyword">return</span> oldWidget.runtimeType == newWidget.runtimeType</span><br><span class="line">      &amp;&amp; oldWidget.key == newWidget.key;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Widget</code> 的 <code>canUpdate</code> 方法通过比较新部件和旧部件的 <code>runtimeType</code> 和 <code>key</code> 属性是否相同来决定更新部件对应的 <code>Element</code>。</p><h2 id="什么是-Element"><a href="#什么是-Element" class="headerlink" title="什么是 Element"></a>什么是 Element</h2><p><code>Element</code> 是实例化的 <code>Widget</code> 对象，通过 <code>Widget</code> 的 <code>createElement()</code> 方法，在特定位置使用 <code>Widget</code> 配置数据生成。</p><p><code>Element</code> 用于管理应用 UI 的更新和更改，管理部件的生命周期，每个 <code>Element</code> 都包含对 <code>Widget</code> 和 <code>RenderObject</code> 的引用。</p><p><img src="./images/how-flutter-render/relationship.png" alt="relationship"></p><p>当 <code>Widget</code> 变化时，如果两个 <code>Widget</code> 的 <code>runtimeType</code> 和 <code>key</code> 属性相同的，那么新的 <code>Element</code> 会通过 <code>Element.update()</code> 更新旧的 <code>Element</code>，否则旧的 <code>Element</code> 会被删除，新生成的 <code>Element</code> 插入到树中。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Element</span> <span class="keyword">extends</span> <span class="title">DiagnosticableTree</span> <span class="keyword">implements</span> <span class="title">BuildContext</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// <span class="markdown">Creates an element that uses the given widget as its configuration.</span></span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// <span class="markdown">Typically called by an override of [Widget.createElement].</span></span></span><br><span class="line">  <span class="built_in">Element</span>(Widget widget)</span><br><span class="line">    : <span class="keyword">assert</span>(widget != <span class="keyword">null</span>),</span><br><span class="line">      _widget = widget;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">Change the widget used to configure this element.</span></span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// <span class="markdown">The framework calls this function when the parent wishes to use a</span></span></span><br><span class="line">  <span class="comment">/// <span class="markdown">different widget to configure this element. The new widget is guaranteed</span></span></span><br><span class="line">  <span class="comment">/// <span class="markdown">to have the same [runtimeType] as the old widget.</span></span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// <span class="markdown">This function is called only during the "active" lifecycle state.</span></span></span><br><span class="line">  <span class="meta">@mustCallSuper</span></span><br><span class="line">  <span class="keyword">void</span> update(<span class="keyword">covariant</span> Widget newWidget) &#123;</span><br><span class="line">    <span class="comment">/// <span class="markdown">...</span></span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">Creates an instance of the [RenderObject] class that this</span></span></span><br><span class="line">  <span class="comment">/// <span class="markdown">[RenderObjectWidget] represents, using the configuration described by this</span></span></span><br><span class="line">  <span class="comment">/// <span class="markdown">[RenderObjectWidget].</span></span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// <span class="markdown">This method should not do anything with the children of the render object.</span></span></span><br><span class="line">  <span class="comment">/// <span class="markdown">That should instead be handled by the method that overrides</span></span></span><br><span class="line">  <span class="comment">/// <span class="markdown">[RenderObjectElement.mount] in the object rendered by this object's</span></span></span><br><span class="line">  <span class="comment">/// <span class="markdown">[createElement] method. See, for example,</span></span></span><br><span class="line">  <span class="comment">/// <span class="markdown">[SingleChildRenderObjectElement.mount].</span></span></span><br><span class="line">  <span class="meta">@protected</span></span><br><span class="line">  RenderObject createRenderObject(BuildContext context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="什么是-RenderObject"><a href="#什么是-RenderObject" class="headerlink" title="什么是 RenderObject"></a>什么是 RenderObject</h2><p><code>RenderObject</code> 用于应用界面的布局和绘制，保存了元素的大小，布局等信息，实例化一个 <code>RenderObject</code> 是非常耗能的。</p><p>当应用运行时 Flutter 使用 <code>RenderObject</code> 的数据绘制应用界面，最终形成一个 <code>Render Tree</code>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">RenderObject</span> <span class="keyword">extends</span> <span class="title">AbstractNode</span> <span class="title">with</span> <span class="title">DiagnosticableTreeMixin</span> <span class="keyword">implements</span> <span class="title">HitTestTarget</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// <span class="markdown">Initializes internal fields for subclasses.</span></span></span><br><span class="line">  RenderObject() &#123;</span><br><span class="line">    _needsCompositing = isRepaintBoundary || alwaysNeedsCompositing;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">The render object at (or below) this location in the tree.</span></span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// <span class="markdown">If this object is a [RenderObjectElement], the render object is the one at</span></span></span><br><span class="line">  <span class="comment">/// <span class="markdown">this location in the tree. Otherwise, this getter will walk down the tree</span></span></span><br><span class="line">  <span class="comment">/// <span class="markdown">until it finds a [RenderObjectElement].</span></span></span><br><span class="line">  RenderObject <span class="keyword">get</span> renderObject &#123;</span><br><span class="line">    RenderObject result;</span><br><span class="line">    <span class="keyword">void</span> visit(<span class="built_in">Element</span> element) &#123;</span><br><span class="line">      <span class="keyword">assert</span>(result == <span class="keyword">null</span>); <span class="comment">// this verifies that there's only one child</span></span><br><span class="line">      <span class="keyword">if</span> (element <span class="keyword">is</span> RenderObjectElement)</span><br><span class="line">        result = element.renderObject;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        element.visitChildren(visit);</span><br><span class="line">    &#125;</span><br><span class="line">    visit(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> layout(Constraints constraints, &#123; <span class="built_in">bool</span> parentUsesSize = <span class="keyword">false</span> &#125;) &#123;</span><br><span class="line">    <span class="comment">/// <span class="markdown">...</span></span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">...</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> paint(PaintingContext context, Offset offset) &#123;</span><br><span class="line">    <span class="comment">/// <span class="markdown">...</span></span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="为什么需要三棵树"><a href="#为什么需要三棵树" class="headerlink" title="为什么需要三棵树"></a>为什么需要三棵树</h2><p>使用三棵树的目的是尽可能复用 <code>Element</code>。</p><p>复用 <code>Element</code> 对性能非常重要，因为 <code>Element</code> 拥有两份关键数据：<code>Stateful widget</code> 的状态对象及底层的<br><code>RenderObject</code>。</p><p>当应用的结构很简单时，或许体现不出这种优势，一旦应用复杂起来，构成页面的元素越来越多，重新创建 3 棵树的代价是很高的，所以需要最小化更新操作。</p><p>当 Flutter 能够复用 <code>Element</code> 时，用户界面的逻辑状态信息是不变的，并且可以重用之前计算的布局信息，避免遍历整棵树。</p><h2 id="举个例子说明"><a href="#举个例子说明" class="headerlink" title="举个例子说明"></a>举个例子说明</h2><p>创建一个简单的 Flutter 应用，代码如下</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(</span><br><span class="line">    MaterialApp(</span><br><span class="line">      color: Colors.white,</span><br><span class="line">      debugShowCheckedModeBanner: <span class="keyword">false</span>,</span><br><span class="line">      builder: (context, child) =&gt; HomePage(),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomePage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _HomePageState createState() =&gt; _HomePageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_HomePageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">HomePage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">bool</span> _isWorld = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">  Widget _buildWorld() &#123;</span><br><span class="line">    <span class="keyword">return</span> RichText(</span><br><span class="line">      text: TextSpan(</span><br><span class="line">        text: <span class="string">'Hello world'</span>,</span><br><span class="line">        style: TextStyle(color: Colors.black),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget _buildFlutter() &#123;</span><br><span class="line">    <span class="keyword">return</span> RichText(</span><br><span class="line">      text: TextSpan(</span><br><span class="line">        text: <span class="string">'Hello flutter'</span>,</span><br><span class="line">        style: TextStyle(color: Colors.black),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> changeText() &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _isWorld = !_isWorld;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      body: Column(</span><br><span class="line">        mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          Center(</span><br><span class="line">            child: _isWorld ? _buildWorld() : _buildFlutter(),</span><br><span class="line">          ),</span><br><span class="line">          SizedBox(height: <span class="number">20.0</span>),</span><br><span class="line">          <span class="comment">// Padding(padding: EdgeInsets.only(top: 20.0)),</span></span><br><span class="line">          IconButton(icon: Icon(Icons.refresh), onPressed: changeText)</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显示效果</p><img src="./images/how-flutter-render/simulator-world.png" style="width:320px"><p>打开 <a href="http://127.0.0.1:9100" target="_blank" rel="noopener">Dart DevTools</a>，可以看到应用的 <code>Widget Tree</code>，此时 <code>RichText</code> 控件的 <code>RenderObject</code> 的 ID 是 <code>#6276a</code></p><p><img src="./images/how-flutter-render/world-id.png" alt="world-id"></p><p>点击图标将文字变成 <code>Hello flutter</code> 时</p><img src="./images/how-flutter-render/simulator-flutter.png" style="width:320px"><p>刷新浏览器页面再次查看 <code>RichText</code> 的 <code>RenderObject</code> 的 ID 依然是 <code>#6276a</code></p><p><img src="./images/how-flutter-render/flutter-id.png" alt="flutter-id"></p><p>可以发现 Flutter 只是更新了文字数据，复用了 <code>RichText</code> 对应的 <code>Element</code> 和 <code>RenderObject</code>。</p><p>而使用 <code>SizedBox</code> 部件取代 <code>Padding</code> 部件时。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> Scaffold(</span><br><span class="line">    body: Column(</span><br><span class="line">      mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        Center(</span><br><span class="line">          child: RichText(</span><br><span class="line">            text: TextSpan(</span><br><span class="line">              text: <span class="string">'Hello <span class="subst">$text</span>'</span>,</span><br><span class="line">              style: TextStyle(color: Colors.black),</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        SizedBox(height: <span class="number">20.0</span>),</span><br><span class="line">        <span class="comment">// Padding(padding: EdgeInsets.only(top: 20.0)),</span></span><br><span class="line">        IconButton(icon: Icon(Icons.refresh), onPressed: changeText)</span><br><span class="line">      ],</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="./images/how-flutter-render/padding.png" alt="padding"></p><p><code>Padding</code> 部件对应的 <code>Element</code> 和 <code>RenderObject</code> 都会被从树中移除，使用 <code>SizedBox</code> 新生成的替代。</p><p><img src="./images/how-flutter-render/sizeedbox.png" alt="sizeedbox"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>Widget</code> 是应用界面的声明信息。<br><code>Element</code> 链接 <code>Widget</code> 和 <code>RenderObject</code>，管理界面的更新和修改。<br><code>RenderObject</code> 保存具体的布局信息，负责绘制 UI。</p><p><img src="./images/how-flutter-render/widget-element-render-object.png" alt="widget-element-render-object"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://youtu.be/996ZgFRENMs" target="_blank" rel="noopener">How Flutter renders Widgets</a> (Video)</p><p><a href="https://medium.com/manabie/how-flutter-renders-widgets-fd6eca945a04" target="_blank" rel="noopener">How Flutter renders Widgets</a></p><p><a href="https://book.flutterchina.club/chapter14/flutter_ui_system.html" target="_blank" rel="noopener">Flutter UI系统</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;./images/how-flutter-render/cover.jpg&quot; alt=&quot;cover&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Flutter" scheme="https://coldstone.fun/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>PlantUML 类图及 Flowchart 流程图绘制入门</title>
    <link href="https://coldstone.fun/post/2020/03/26/learn-classchart-flowchart/"/>
    <id>https://coldstone.fun/post/2020/03/26/learn-classchart-flowchart/</id>
    <published>2020-03-26T02:00:00.000Z</published>
    <updated>2020-12-07T01:51:26.703Z</updated>
    
    <content type="html"><![CDATA[<p><img src="./images/draw.jpg" alt="draw"></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段时间设计后端表结构的时候接触了 <code>PlantUML</code>，它能够直观表现出类的属性和方法，反应出类与类之间的关系。之前有同事就是用 <code>PlantUML</code> 来做后端数据表设计工作的，所以有必要学习一下。</p><p>流程图 <code>Flowchart</code> 是用来展示操作过程或逻辑流程的一种图表，语法比较简单，方便易用，一些比较复杂的判断都可以使用一个流程图来直观表现。</p><h2 id="PlantUML"><a href="#PlantUML" class="headerlink" title="PlantUML"></a>PlantUML</h2><p><a href="https://plantuml.com/zh/" target="_blank" rel="noopener">PlantUML</a> 是一个开源项目，支持快速绘制时序图、用例图、类图、活动图、组件图、状态图、对象图、部署图等。同时还支持非 UML 图的甘特图、架构图等。</p><p><code>PlantUML</code> 有一些通用语法</p><ul><li>单行注释：以单引号 <code>&#39;</code> 开头的语句。</li><li>多行注释：以 <code>/&#39;</code> 和 <code>&#39;/</code> 作为注释的开始和结束。</li><li>页眉：使用 <code>header</code> 命令在生成的图中增加页眉，用 <code>center</code>, <code>left</code> 或 <code>right</code> 实现居中、左对齐和右对齐。</li><li>页脚：使用 <code>footer</code> 命令在生成的图中增加页眉，用 <code>center</code>, <code>left</code> 或 <code>right</code> 实现居中、左对齐和右对齐。</li><li>缩放：使用 <code>scale</code> 命令缩放生成的图像。</li><li>标题：使用 <code>title</code> 关键字添加标题。</li><li>图片标题：使用 <code>caption</code> 关键字在图像下放置一个标题.</li><li>图例说明: <code>legend</code> 和 <code>endlegend</code> 作为关键词，使用 <code>left</code>, <code>right</code>, <code>center</code> 为这个图例指定对齐方式。</li></ul><p>一个🌰 <a href="http://www.plantuml.com/plantuml/uml/FO_D2i8m48JlynHxAmZI8eBYGIhU12_Y2uHsRHVo8ytMvtVHj8V0DxERcQJDwYQTWqVkd6Swx9hD_jW0rOMonC4iBv6fIo5mLA2kGFGS9PDae_liLRomuRMiL3M0peWd6jdrFA7iBv9ZNmWgQXNB_AViidkhfBZQHGEF53ZHzaotsJgLJkJJXwtEys2XQu-ZOjWfX5TAzg8ryo_Hsin-_mK0" target="_blank" rel="noopener">查看</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">scale 720*480</span><br><span class="line"></span><br><span class="line">&#39;A single line comment</span><br><span class="line"></span><br><span class="line">&#x2F;&#39;</span><br><span class="line">  This is</span><br><span class="line">  Multilie</span><br><span class="line">  Comment</span><br><span class="line">&#39;&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">center header</span><br><span class="line">This is header</span><br><span class="line">endheader</span><br><span class="line"></span><br><span class="line">title This is title</span><br><span class="line"></span><br><span class="line">caption This is caption</span><br><span class="line"></span><br><span class="line">Romeo -&gt; Juliet : love</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">legend</span><br><span class="line">This is a legend</span><br><span class="line">endlegend</span><br><span class="line"></span><br><span class="line">footer This is footer</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><img style="width:320px" alt="base" src="http://www.plantuml.com/plantuml/png/HP3D2i8m48JlynHxAmZI8eBYGIhU12_Y2uHsRHVo8ytMvtUnFrwIRoQp6TWwgnjq31wvSPxfiAis-sC551VA4Zkpl4Ic9eN0KO6o0D6pbqoIZUwZL_72XjSvKfG06YCUg6VNseLvODKSsma15RMI9V1JDkxUAYckzgo1HmgSQ7kcssYjIYVowSC0F7VswR_9qUBOCI7mIacjVibC4hMzsGQ-"><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p>画类图需要了解类与类之间的几种不同的关系</p><table><thead><tr><th align="left">关系</th><th align="left">意思</th><th align="left">标记</th></tr></thead><tbody><tr><td align="left">Association 关系</td><td align="left">两个类之间有相互关系</td><td align="left"><code>&lt;--</code></td></tr><tr><td align="left">Inheritance 继承</td><td align="left">子类继承父类</td><td align="left"><code>&lt;|--</code></td></tr><tr><td align="left">Composition 组合</td><td align="left">两个类之间相互依赖</td><td align="left"><code>*--</code></td></tr><tr><td align="left">Aggregation 聚合</td><td align="left">一个类属于另一个类</td><td align="left"><code>o--</code></td></tr><tr><td align="left">Implementation 实现</td><td align="left">一个类实现另一个类的方法</td><td align="left"><code>&lt;|..</code></td></tr><tr><td align="left">Dependency 依赖</td><td align="left">一个类依赖于另一个类</td><td align="left"><code>&lt;..</code></td></tr></tbody></table><p><img src="https://miro.medium.com/max/1180/1*EUvDMA1vr0DiucONPzK9kA.png" alt="关系图"></p><p>设计一个博客系统😜 <a href="http://www.plantuml.com/plantuml/umla/XPBHwjCm58VlynJdSdDs3lL2YiZ4Hn2zh-t11TeKaenTw63Wc5CSSwB3JS4v54MXkn2nEFLfbgQ-XUiQszaXV-X5slFzlfoSj2samsKty8bm7H_XyfNMkKiNMyH59f531nqFETd5WrtyIKS3DNcXbqCrMQfehRzizVODGUOPYX3NTuI0srHG6NAuH-0E3ti2QtNIBwhNkQIkZrcr0TIpWJAPBPskx8IyU7L39f596uJabDqz4jmIU713mwIp9NC2jE5cpWBi7mjwd4eqszKgllg1SCCWG2R_o_IBfhs0icnJ2ppqiTIQ5kfbvKRk_AU27fMLnFdoXCTK9LsXeEp8W2U3g9mX-tGqsIn_cD_L-vPbJcK3wEYjVZfIivV9wqTglFgzU7T1_vYdlsR9_A7-l5BFdgIROHfztzzz-k2dUlpAI9hDuZfjqCy_9kDlQhhPRT-hqIAFbg1f-1JCrUIloBAk5N-G3KaSgsYTiydNQVfXRBn6ToPkx6raNZVm_m00" target="_blank" rel="noopener">点击查看</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">center header</span><br><span class="line">一个简单的博客系统</span><br><span class="line">endheader</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Visitor &#123;</span><br><span class="line"> browse()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Article &#123;</span><br><span class="line"> + id: int</span><br><span class="line"> + author: int</span><br><span class="line"> + content: string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class User &#123;</span><br><span class="line">  +id: int</span><br><span class="line">  +name: String</span><br><span class="line"></span><br><span class="line">  - writeArticle(content: string)</span><br><span class="line">  - commentArticle(content: string)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Admin &#123;</span><br><span class="line"> - deleteArticle(id: int)</span><br><span class="line"> - deleteComment(id: int)</span><br><span class="line"> - editArticle(id: int, content: int)</span><br><span class="line"> - editComment(id: int, content: int)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Comment &#123;</span><br><span class="line">  +id: int</span><br><span class="line">  +content: string</span><br><span class="line">  +author: int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">User &lt;|-- Admin : 管理员有删除&#x2F;编辑文章和评论的能力</span><br><span class="line">User &lt;.. Article : 用户可以写文章</span><br><span class="line">User &lt;.. Comment : 用户可以写评论</span><br><span class="line">Article --&gt; Visitor : 游客可以浏览文章</span><br><span class="line">Comment --&gt; Visitor : 游客可以浏览评论</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><p><img src="./images/learn-chart/class.png" alt="blog"></p><h2 id="Flowchart"><a href="#Flowchart" class="headerlink" title="Flowchart"></a>Flowchart</h2><p>流程图使用 <a href="http://flowchart.js.org/" target="_blank" rel="noopener">Flowchart</a> 绘制，语法比较简单。</p><p>定义一个流程图元素 <code>name=&gt;type: content:&gt;url</code></p><ul><li>name: 元素的名称</li><li>type：类型，包括如下类别：<ul><li>start</li><li>end</li><li>operation</li><li>subroutine</li><li>condition</li><li>inputoutput</li><li>parallel</li></ul></li><li>content：文本内容</li><li>url：连接</li></ul><p>示例如下</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 艰难的开始</span><br><span class="line">ge=&gt;end: 你成功了:&gt;https:<span class="comment">//www.zhihu.com/hot</span></span><br><span class="line">be=&gt;end: 你失败了:&gt;https:<span class="comment">//bbs.hupu.com/bxj</span></span><br><span class="line"></span><br><span class="line">skill=&gt;condition: 有技能吗</span><br><span class="line">money=&gt;condition: 有钱吗</span><br><span class="line">handsome=&gt;condition: 长得帅吗</span><br><span class="line"></span><br><span class="line">dream=&gt;operation: 做梦</span><br><span class="line">imp=&gt;operation: 努力提高自己</span><br><span class="line">work=&gt;operation: 工作/读书</span><br><span class="line">make=&gt;operation: 投资理财</span><br><span class="line">rich=&gt;operation: 找富婆</span><br><span class="line"></span><br><span class="line">st-&gt;skill</span><br><span class="line">skill(yes)-&gt;work-&gt;ge</span><br><span class="line">skill(no)-&gt;money</span><br><span class="line">money(yes)-&gt;make-&gt;ge</span><br><span class="line">money(no)-&gt;handsome</span><br><span class="line">handsome(yes)-&gt;rich-&gt;ge</span><br><span class="line">handsome(no)-&gt;be</span><br></pre></td></tr></table></figure><p><img src="./images/learn-chart/flow.png" alt="start"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://plantuml.com/zh/" target="_blank" rel="noopener">PlantUML</a></p><p><a href="https://github.com/adrai/flowchart.js" target="_blank" rel="noopener">Flowchart</a></p><p><a href="https://medium.com/@smagid_allThings/uml-class-diagrams-tutorial-step-by-step-520fd83b300b" target="_blank" rel="noopener">UML Class Diagrams Tutorial, Step by Step</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;./images/draw.jpg&quot; alt=&quot;draw&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习" scheme="https://coldstone.fun/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="PlantUML" scheme="https://coldstone.fun/tags/PlantUML/"/>
    
      <category term="Flowchart" scheme="https://coldstone.fun/tags/Flowchart/"/>
    
  </entry>
  
  <entry>
    <title>记录两个使用 Flutter 的 DropdownButton 问题</title>
    <link href="https://coldstone.fun/post/2020/03/24/flutter-dropdown-problem/"/>
    <id>https://coldstone.fun/post/2020/03/24/flutter-dropdown-problem/</id>
    <published>2020-03-24T08:08:27.000Z</published>
    <updated>2020-12-07T01:51:26.699Z</updated>
    
    <content type="html"><![CDATA[<p>这几天在使用 <code>Flutter</code> 开发应用过程中遇到关于 <code>DropdownButton</code> 两个问题，记录一下。</p><p>问题一：在 <code>showModalBottomSheet</code> 里面使用 <code>DropdownButton</code> 改变选择后界面不变化。</p><p><img src="./images/flutter-dropdown-problem/dropdown-no-change.gif" alt="no-change"></p><p>但是 <code>onChanged</code> 事件已经触发</p><p><img src="./images/flutter-dropdown-problem/console.png" alt="console"></p><p>代码如下</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> _type = <span class="number">0</span>;</span><br><span class="line">...</span><br><span class="line">IconButton(</span><br><span class="line">  icon: Icon(Icons.filter_list),</span><br><span class="line">  onPressed: () &#123;</span><br><span class="line">    showModalBottomSheet(</span><br><span class="line">      context: context,</span><br><span class="line">      builder: (BuildContext context) &#123;</span><br><span class="line">        <span class="keyword">return</span> Column(</span><br><span class="line">          crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            Padding(</span><br><span class="line">              padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">12.0</span>),</span><br><span class="line">              child: Row(</span><br><span class="line">                children: &lt;Widget&gt;[</span><br><span class="line">                  SizedBox(</span><br><span class="line">                    width: <span class="number">80.0</span>,</span><br><span class="line">                    child: Text(<span class="string">'类型: '</span>),</span><br><span class="line">                  ),</span><br><span class="line">                  DropdownButton&lt;<span class="built_in">int</span>&gt;(</span><br><span class="line">                    value: _type,</span><br><span class="line">                    onChanged: (<span class="built_in">int</span> newValue) &#123;</span><br><span class="line">                      setState(() &#123;</span><br><span class="line">                        _type = newValue;</span><br><span class="line">                      &#125;);</span><br><span class="line">                      <span class="built_in">print</span>(newValue.toString());</span><br><span class="line">                    &#125;,</span><br><span class="line">                    items: [</span><br><span class="line">                      DropdownMenuItem&lt;<span class="built_in">int</span>&gt;(</span><br><span class="line">                        value: <span class="number">0</span>,</span><br><span class="line">                        child: Text(<span class="string">'类型 1'</span>),</span><br><span class="line">                      ),</span><br><span class="line">                      DropdownMenuItem&lt;<span class="built_in">int</span>&gt;(</span><br><span class="line">                        value: <span class="number">1</span>,</span><br><span class="line">                        child: Text(<span class="string">'类型 2'</span>),</span><br><span class="line">                      ),</span><br><span class="line">                    ],</span><br><span class="line">                  ),</span><br><span class="line">                ],</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p>解决方法：添加一个 <code>StatefulBuilder</code> 部件在最外层即可</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">showModalBottomSheet(</span><br><span class="line">  context: context,</span><br><span class="line">  builder: (BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> StatefulBuilder(</span><br><span class="line">      builder: (context, StateSetter setState) &#123;</span><br><span class="line">        <span class="keyword">return</span> Column(</span><br><span class="line">          crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            Padding(</span><br><span class="line">              padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">12.0</span>),</span><br><span class="line">              child: Row(</span><br><span class="line">                children: &lt;Widget&gt;[</span><br><span class="line">                  SizedBox(</span><br><span class="line">                    width: <span class="number">80.0</span>,</span><br><span class="line">                    child: Text(<span class="string">'类型: '</span>),</span><br><span class="line">                  ),</span><br><span class="line">                  DropdownButton&lt;<span class="built_in">int</span>&gt;(</span><br><span class="line">                    value: _type,</span><br><span class="line">                    onChanged: (<span class="built_in">int</span> newValue) &#123;</span><br><span class="line">                      setState(() &#123;</span><br><span class="line">                        _type = newValue;</span><br><span class="line">                      &#125;);</span><br><span class="line">                      <span class="built_in">print</span>(newValue.toString());</span><br><span class="line">                    &#125;,</span><br><span class="line">                    items: [</span><br><span class="line">                      DropdownMenuItem&lt;<span class="built_in">int</span>&gt;(</span><br><span class="line">                        value: <span class="number">0</span>,</span><br><span class="line">                        child: Text(<span class="string">'类型 1'</span>),</span><br><span class="line">                      ),</span><br><span class="line">                      DropdownMenuItem&lt;<span class="built_in">int</span>&gt;(</span><br><span class="line">                        value: <span class="number">1</span>,</span><br><span class="line">                        child: Text(<span class="string">'类型 2'</span>),</span><br><span class="line">                      ),</span><br><span class="line">                    ],</span><br><span class="line">                  ),</span><br><span class="line">                ],</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>问题二：当多个 <code>DropdownMenuItem</code> 值相同时会报错</p><p><img src="./images/flutter-dropdown-problem/crash.png" alt="crash"></p><p>这个报错产生的原因是这里的 <code>DropdownMenuItem</code> 是请求后端接口后会生成很多选项，如果设置了 <code>DropdownButton</code> 的 <code>value</code> 值，那么 <code>DropdownMenuItem</code> 就会有相同的值，出现这个错误。</p><p>解决方法：不设置 <code>DropdownButton</code> 的初始 <code>value</code> 值</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">DropdownButton&lt;<span class="built_in">int</span>&gt;(</span><br><span class="line">  <span class="comment">// value: 0,</span></span><br><span class="line">  onChanged: (<span class="built_in">int</span> newValue) &#123;</span><br><span class="line">    setState(() &#123;&#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  items: types.map(</span><br><span class="line">    (item) &#123;</span><br><span class="line">      <span class="keyword">return</span> DropdownMenuItem&lt;<span class="built_in">int</span>&gt;(</span><br><span class="line">        value: item[<span class="string">"value"</span>],</span><br><span class="line">        child: Text(item[<span class="string">"label"</span>]),</span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line">  ).toList(),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>ps：这两个问题卡了我两天😔</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;这几天在使用 &lt;code&gt;Flutter&lt;/code&gt; 开发应用过程中遇到关于 &lt;code&gt;DropdownButton&lt;/code&gt; 两个问题，记录一下。&lt;/p&gt;&lt;p&gt;问题一：在 &lt;code&gt;showModalBottomSheet&lt;/code&gt; 里面使用
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Flutter" scheme="https://coldstone.fun/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法之二叉树</title>
    <link href="https://coldstone.fun/post/2020/03/15/das-tree/"/>
    <id>https://coldstone.fun/post/2020/03/15/das-tree/</id>
    <published>2020-03-15T03:05:00.000Z</published>
    <updated>2020-12-07T01:51:26.699Z</updated>
    
    <content type="html"><![CDATA[<p>二叉树是一种非线性的数据结构，以分层的方式存储数据。在二叉树上进行添加，查找和删除数据非常快。</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>二叉树是一种非线性的数据结构，以分层的方式存储数据。用于存储有层级关系的数据，如计算机文件，公司组织结构等数据。在二叉树上进行添加，查找和删除数据非常快。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>要实现树结构首先需要 <code>Node</code> 节点类，节点保存数据和它左右节点的链接，<code>show</code> 方法返回节点数据。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Node &#123;</span><br><span class="line">  data: <span class="built_in">number</span></span><br><span class="line">  left: Node = <span class="literal">null</span></span><br><span class="line">  right: Node = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">data: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.data = data</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  show() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现二叉树，首先需要向树中插入节点的方法，这个方法先创建一个节点，判断树是否有根节点，没有的话将新节点作为树的根节点，否则进行下一步；</p><ol><li>设当前节点为树的根节点，开始循环</li><li>如果插入节点的数据小于当前节点的数据，将新当前节点设为原当前节点的左节点，否则执行第 4 步</li><li>如果当前节点的左节点为 <code>null</code> ，就将新的节点插入这个位置，退出循环；否则执行下一次循环</li><li>将新当前节点设为原当前节点的右节点</li><li>如果当前节点的右节点为 <code>null</code> ，就将新的节点插入这个位置，退出循环；否则执行下一次循环</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> BST &#123;</span><br><span class="line">  root: Node = <span class="literal">null</span></span><br><span class="line">  length: <span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 插入节点</span></span><br><span class="line">  insert(data: <span class="built_in">number</span>) &#123;</span><br><span class="line">    <span class="comment">// 先创建新的节点</span></span><br><span class="line">    <span class="keyword">const</span> node = <span class="keyword">new</span> Node(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.root === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.root = node</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> originNode</span><br><span class="line">      <span class="comment">// 将当前节点设为树根节点</span></span><br><span class="line">      <span class="keyword">let</span> currentNode = <span class="keyword">this</span>.root</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 开始循环</span></span><br><span class="line">      <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 保存原节点引用</span></span><br><span class="line">        originNode = currentNode</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  如果插入节点的数据小于当前节点的数据</span></span><br><span class="line">        <span class="keyword">if</span> (data &lt; currentNode.data) &#123;</span><br><span class="line">          <span class="comment">// 将新当前节点设为原当前节点的左节点</span></span><br><span class="line">          currentNode = currentNode.left</span><br><span class="line">          <span class="comment">// 如果当前节点的左节点为 `null` ，就将新的节点插入这个位置，退出循环；否则执行下一次循环</span></span><br><span class="line">          <span class="keyword">if</span> (currentNode === <span class="literal">null</span>) &#123;</span><br><span class="line">            originNode.left = node</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 将新当前节点设为原当前节点的右节点</span></span><br><span class="line">          currentNode = currentNode.right</span><br><span class="line">          <span class="comment">// 如果当前节点的右节点为 `null` ，就将新的节点插入这个位置，退出循环；否则执行下一次循环</span></span><br><span class="line">          <span class="keyword">if</span> (currentNode === <span class="literal">null</span>) &#123;</span><br><span class="line">            originNode.right = node</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遍历二叉树，中序，先序，后序</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 中序遍历</span></span><br><span class="line">inOrder(node: Node) &#123;</span><br><span class="line">  <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.inOrder(node.left)</span><br><span class="line">    node.show()</span><br><span class="line">    <span class="keyword">this</span>.inOrder(node.right)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先序遍历</span></span><br><span class="line">preOrder(node: Node) &#123;</span><br><span class="line">  <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">    node.show()</span><br><span class="line">    <span class="keyword">this</span>.preOrder(node.left)</span><br><span class="line">    <span class="keyword">this</span>.preOrder(node.right)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后序遍历</span></span><br><span class="line">postOrder(node: Node) &#123;</span><br><span class="line">  <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.postOrder(node.left)</span><br><span class="line">    <span class="keyword">this</span>.postOrder(node.right)</span><br><span class="line">    node.show()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查找节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">find(data: number): Node &#123;</span><br><span class="line">  <span class="keyword">let</span> currentNode = <span class="keyword">this</span>.root</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (currentNode !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (currentNode.data === data) &#123;</span><br><span class="line">      <span class="keyword">return</span> currentNode</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentNode.data &gt; data) &#123;</span><br><span class="line">      currentNode = currentNode.left</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      currentNode = currentNode.right</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除节点</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">remove(data: <span class="built_in">number</span>) &#123;</span><br><span class="line">  <span class="keyword">this</span>.root = <span class="keyword">this</span>.removeNode(<span class="keyword">this</span>.root, data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">removeNode(node: Node, data: <span class="built_in">number</span>): Node &#123;</span><br><span class="line">  <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (data === node.data) &#123;</span><br><span class="line">    <span class="comment">// 没有子节点</span></span><br><span class="line">    <span class="keyword">if</span> (node.left === <span class="literal">null</span> &amp;&amp; node.right === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 没有左子节点</span></span><br><span class="line">    <span class="keyword">if</span> (node.left === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> node.right</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 没有右子节点</span></span><br><span class="line">    <span class="keyword">if</span> (node.right === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> node.left</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 有左右两个节点</span></span><br><span class="line">    <span class="keyword">const</span> tempNode = <span class="keyword">this</span>.min(node.right)</span><br><span class="line">    node.data = tempNode.data</span><br><span class="line">    node.right = <span class="keyword">this</span>.removeNode(node.right, tempNode.data)</span><br><span class="line">    <span class="keyword">return</span> node</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.data &gt; data) &#123;</span><br><span class="line">    node.left = <span class="keyword">this</span>.removeNode(node.left, data)</span><br><span class="line">    <span class="keyword">return</span> node</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    node.right = <span class="keyword">this</span>.removeNode(node.right, data)</span><br><span class="line">    <span class="keyword">return</span> node</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最大值，最小值</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最小值节点</span></span><br><span class="line">min(node: Node = <span class="keyword">this</span>.root): Node &#123;</span><br><span class="line">  <span class="keyword">let</span> currentNode = node</span><br><span class="line">  <span class="keyword">while</span> (currentNode.left !== <span class="literal">null</span>) &#123;</span><br><span class="line">    currentNode = currentNode.left</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> currentNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最大值节点</span></span><br><span class="line">max(node: Node = <span class="keyword">this</span>.root): Node &#123;</span><br><span class="line">  <span class="keyword">let</span> currentNode = node</span><br><span class="line">  <span class="keyword">while</span> (currentNode.right !== <span class="literal">null</span>) &#123;</span><br><span class="line">    currentNode = currentNode.right</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> currentNode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p><code>BST</code> 可以用来记录一组数据中数据出现的次数，首先在 <code>Node</code> 类上添加 <code>count</code> 属性</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Node &#123;</span><br><span class="line">  data: <span class="built_in">number</span></span><br><span class="line">  left: Node = <span class="literal">null</span></span><br><span class="line">  right: Node = <span class="literal">null</span></span><br><span class="line">  count: <span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">data: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.data = data</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  show() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>BST</code> 类上添加 <code>update</code> 方法，当插入数据为新值时使用 <code>insert</code> 方法，当插入已经存在的值时使用 <code>update</code> 方法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">update(data: <span class="built_in">number</span>): Node &#123;</span><br><span class="line">  <span class="keyword">const</span> node = <span class="keyword">this</span>.find(data)</span><br><span class="line">  <span class="keyword">if</span>(node !== <span class="literal">null</span>) &#123;</span><br><span class="line">    node.count++</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;node.data&#125;</span>: `</span>, node.count)</span><br><span class="line">    <span class="keyword">return</span> node</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bst = <span class="keyword">new</span> BST();</span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; array.length; index++) &#123;</span><br><span class="line">    <span class="keyword">const</span> num = array[index]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bst.find(num) !== <span class="literal">null</span>) &#123;</span><br><span class="line">        bst.update(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        bst.insert(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3:  1</span></span><br><span class="line"><span class="comment">// 2:  1</span></span><br><span class="line"><span class="comment">// 5:  1</span></span><br><span class="line"><span class="comment">// 4:  1</span></span><br><span class="line"><span class="comment">// 2:  2</span></span><br><span class="line"><span class="comment">// 5:  2</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;二叉树是一种非线性的数据结构，以分层的方式存储数据。在二叉树上进行添加，查找和删除数据非常快。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="DSA" scheme="https://coldstone.fun/tags/DSA/"/>
    
  </entry>
  
  <entry>
    <title>如何使用 Gitlib 持续发布 Flutter 应用</title>
    <link href="https://coldstone.fun/post/2020/02/27/flutter-gitlab-pineline/"/>
    <id>https://coldstone.fun/post/2020/02/27/flutter-gitlab-pineline/</id>
    <published>2020-02-27T03:01:00.000Z</published>
    <updated>2020-12-07T01:51:26.703Z</updated>
    
    <content type="html"><![CDATA[<p><img src="./images/samuel-chenard.jpg" alt="action"></p><p>本文介绍如何使用 Gitlib CI/CD 构建发布 Flutter 应用</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://coldstone.fun/post/2020/02/26/flutter-github-actions/">前一篇文章</a>介绍了使用 Github Actions 持续发布 Flutter 应用，本文分享下如何使用 Gitlib 的 CI/CD 功能同样实现发布 Flutter 应用，因为有很多公司是用自己搭建的 Gitlab 来管理代码的。</p><p>要使用 Gitlib 的 CI/CD 功能首先需要在项目根目录创建一个 yml 格式的配置文件 <code>.gitlab-ci.yml</code>，这个配置文件会定义一个流水线 Pipeline。一个 Pipeline 由多个任务 Job 组成，任务就是具体要做的事情，如代码编译或测试； Pipeline 里的 stages 决定了任务何时以及如何运行。以下就是一个 Pipeline 有 3 个 stage，依次执行 build，test 和 deploy 任务。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">job01:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span> <span class="string">echo</span> <span class="string">'build job'</span></span><br><span class="line"><span class="attr">job02:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span> <span class="string">echo</span> <span class="string">'test job'</span></span><br><span class="line"><span class="attr">job03:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">script:</span> <span class="string">echo</span> <span class="string">'deploy job'</span></span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>要在 Pipeline 里构建打包 Flutter 应用的 apk，首先需要在流水线里配置 Android 以及 Flutter 环境，搜索一番后发现了一个 Github 上的 Flutter 镜像 <a href="https://github.com/cirruslabs/docker-images-flutter" target="_blank" rel="noopener">docker-images-flutter</a> 很适合，看这个镜像的 <a href="https://github.com/cirruslabs/docker-images-flutter/blob/master/sdk/Dockerfile" target="_blank" rel="noopener">Dockerfile</a> 可以发现它是从 <code>cirrusci/android-sdk:29</code> 这个 Android sdk 镜像开始，然后下载 Flutter SDK，这样就有了了 Android 和 Flutter 环境，接下来只需要运行测试和打包命令即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">release</span></span><br><span class="line"></span><br><span class="line"><span class="string">//</span> <span class="string">build</span> <span class="string">阶段使用拥有</span> <span class="string">Android</span> <span class="string">以及</span> <span class="string">Flutter</span> <span class="string">环境的镜像，进行测试打包</span></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">cirrusci/flutter:stable</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="string">//</span> <span class="string">下载依赖包</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">flutter</span> <span class="string">packages</span> <span class="string">get</span></span><br><span class="line">    <span class="string">//</span> <span class="string">执行测试</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">flutter</span> <span class="string">test</span></span><br><span class="line">    <span class="string">//</span> <span class="string">打包</span> <span class="string">apk</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">flutter</span> <span class="string">build</span> <span class="string">apk</span> <span class="string">--release</span></span><br><span class="line">  <span class="string">//</span> <span class="string">这里定义任务生成的文件</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">expire_in:</span> <span class="number">1</span> <span class="string">hour</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">build/app/outputs/apk/release/*.apk</span></span><br><span class="line">  <span class="attr">interruptible:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><p>要发布 apk 文件到仓库的 release 还需要使用 <a href="https://github.com/inetprocess/gitlab-release" target="_blank" rel="noopener">gitlab-release</a> 这个镜像进行发布操作</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">release</span></span><br><span class="line"></span><br><span class="line"><span class="string">//</span> <span class="string">build</span> <span class="string">阶段使用拥有</span> <span class="string">Android</span> <span class="string">以及</span> <span class="string">Flutter</span> <span class="string">环境的镜像，进行测试打包</span></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">cirrusci/flutter:stable</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">flutter</span> <span class="string">packages</span> <span class="string">get</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">flutter</span> <span class="string">test</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">flutter</span> <span class="string">build</span> <span class="string">apk</span> <span class="string">--release</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">expire_in:</span> <span class="number">1</span> <span class="string">hour</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">build/app/outputs/apk/release/*.apk</span></span><br><span class="line">  <span class="attr">interruptible:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="string">//</span> <span class="string">发布到仓库的</span> <span class="string">release</span></span><br><span class="line"><span class="attr">release:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">inetprocess/gitlab-release</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">release</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">dependencies:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="string">//</span> <span class="string">使用打包好的</span> <span class="string">apk</span> <span class="string">文件路径</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">gitlab-release</span> <span class="string">--message</span> <span class="string">'自动发布'</span> <span class="string">build/app/outputs/apk/release/*.apk</span></span><br></pre></td></tr></table></figure><p>发布还需要一个 <code>Personal Access Token</code> 给 release 任务提供 api 权限，有了 api 权限就可以请求 Gitlab 的 release 接口上传 apk 了</p><p><img src="./images/gitlib-token.jpg" alt="token"></p><p>使用刚才创建的 token 在项目仓库里配置流水线的环境变量 <code>GITLAB_ACCESS_TOKEN</code></p><p><img src="./images/gitlab-variable.jpg" alt="var"></p><p>最后创建一个版本标签推送到 Gitlab 仓库，就可以看到运行中的流水线了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git tag v1.0.0</span><br><span class="line"></span><br><span class="line">git push --tag</span><br></pre></td></tr></table></figure><p><img src="./images/gitlib-pineline.jpg" alt="var"></p><p>流水线运行完毕，一个版本发布成功。</p><p><img src="./images/gitlib-release.jpg" alt="var"></p><h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><p><a href="https://www.pgyer.com/" target="_blank" rel="noopener">蒲公英</a> 平台可以对应用进行内测分发，使用蒲公英提供的上传应用包的接口，将 <code>CI/CD</code> 构建出来的应用 <code>apk</code> 直接上传，免去手动去网页上上传的麻烦</p><p>添加一个 <code>upload</code> 任务，依赖于 <code>build</code> 任务，向蒲公英的上传接口发送一个请求，<code>$APK_PATH</code> 是应用打包出来的路径，定义为一个变量方便使用;</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">release</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">upload</span></span><br><span class="line"><span class="string">......</span></span><br><span class="line"><span class="attr">upload:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">upload</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">dependencies:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">curl</span> <span class="string">-S</span> <span class="string">"http://www.pgyer.com/apiv2/app/upload"</span> <span class="string">-F</span> <span class="string">"file=@$APK_PATH"</span> <span class="string">-F</span> <span class="string">"_api_key=$PGY_API_KEY"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">uploaded</span></span><br></pre></td></tr></table></figure><p><code>$PGY_API_KEY</code> 是蒲公英平台的 <code>API Key</code>，需要添加到 <code>CI/CD</code> 的环境变量中</p><p><img src="./images/pgy-api-key.png" alt="api-key"></p><p>在仓库的设置那里添加新的环境变量</p><p><img src="./images/gitlab-pgy-variable.png" alt="variable"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>添加流水线配置 <code>.gitlab-ci.yml</code></li><li>创建 <code>Personal Access Token</code></li><li>设置环境变量 <code>GITLAB_ACCESS_TOKEN</code></li><li>推送版本标签</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/inetprocess/gitlab-release" target="_blank" rel="noopener">Gitlab Release</a></p><p><a href="https://docs.gitlab.com/ee/ci/quick_start/README.html" target="_blank" rel="noopener">Getting started with GitLab CI/CD</a></p><p><a href="https://www.pgyer.com/doc/view/travis_android" target="_blank" rel="noopener">使用 Travis CI 实现持续集成 (Android)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;./images/samuel-chenard.jpg&quot; alt=&quot;action&quot;&gt;&lt;/p&gt;&lt;p&gt;本文介绍如何使用 Gitlib CI/CD 构建发布 Flutter 应用&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://coldstone.fun/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Flutter" scheme="https://coldstone.fun/tags/Flutter/"/>
    
      <category term="Gitlib" scheme="https://coldstone.fun/tags/Gitlib/"/>
    
  </entry>
  
</feed>
